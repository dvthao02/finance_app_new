"""
Animated Widgets Utilities
===========================

Module ch·ª©a c√°c widget c√≥ hi·ªáu ·ª©ng animation ƒë·ªÉ tƒÉng tr·∫£i nghi·ªám ng∆∞·ªùi d√πng.
C√°c widget n√†y c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong b·∫•t k·ª≥ ph·∫ßn n√†o c·ªßa ·ª©ng d·ª•ng.

C√°c widget ch√≠nh:
- AnimatedNumberLabel: Label hi·ªÉn th·ªã s·ªë v·ªõi hi·ªáu ·ª©ng ƒë·∫øm
- AnimatedStatCard: Th·∫ª th·ªëng k√™ v·ªõi animation
- SlideInWidget: Widget tr∆∞·ª£t v√†o t·ª´ b√™n tr√°i
- FadeInWidget: Widget v·ªõi hi·ªáu ·ª©ng fade in
- StaggeredAnimationGroup: Nh√≥m animation ch·∫°y l·∫ßn l∆∞·ª£t

C√°ch s·ª≠ d·ª•ng:
    from utils.animated_widgets import AnimatedNumberLabel, AnimatedStatCard
    
    # T·∫°o label s·ªë c√≥ animation
    label = AnimatedNumberLabel()
    label.set_target_value(1000000)  # S·∫Ω ƒë·∫øm t·ª´ 0 l√™n 1,000,000
    
    # T·∫°o stat card
    card = AnimatedStatCard("Thu nh·∫≠p", 500000, "Th√°ng n√†y", "#10b981", "üìà")
"""

from PyQt5.QtWidgets import QLabel, QFrame, QVBoxLayout, QHBoxLayout, QPushButton
from PyQt5.QtCore import Qt, QPropertyAnimation, QRect, QEasingCurve, QTimer, pyqtSignal, QSequentialAnimationGroup
from PyQt5.QtGui import QFont, QColor, QPalette
import random

class AnimatedNumberLabel(QLabel):
    """Label hi·ªÉn th·ªã s·ªë ti·ªÅn v·ªõi hi·ªáu ·ª©ng ƒë·∫øm"""
    
    animation_finished = pyqtSignal()
    
    def __init__(self, target_value=0, prefix="", suffix=" ƒë", duration=1500, parent=None):
        super().__init__(parent)
        self.target_value = target_value
        self.current_value = 0
        self.prefix = prefix
        self.suffix = suffix
        self.duration = duration
        
        # Timer cho animation
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_display)
        self.animation_steps = 60  # 60 frames for smooth animation
        self.current_step = 0
        
    def set_target_value(self, value):
        """ƒê·∫∑t gi√° tr·ªã ƒë√≠ch v√† b·∫Øt ƒë·∫ßu animation"""
        self.target_value = float(value)
        self.current_step = 0
        
        # T√≠nh to√°n increment cho m·ªói b∆∞·ªõc
        self.increment = (self.target_value - self.current_value) / self.animation_steps
        
        # B·∫Øt ƒë·∫ßu animation
        self.timer.start(self.duration // self.animation_steps)
        
    def update_display(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã trong qu√° tr√¨nh animation"""
        if self.current_step < self.animation_steps:
            self.current_value += self.increment
            self.current_step += 1
            
            # Hi·ªÉn th·ªã gi√° tr·ªã hi·ªán t·∫°i
            display_value = int(self.current_value)
            self.setText(f"{self.prefix}{display_value:,}{self.suffix}")
        else:
            # Animation ho√†n th√†nh
            self.current_value = self.target_value
            display_value = int(self.target_value)
            self.setText(f"{self.prefix}{display_value:,}{self.suffix}")
            self.timer.stop()
            self.animation_finished.emit()

class AnimatedStatCard(QFrame):
    """Th·∫ª th·ªëng k√™ v·ªõi hi·ªáu ·ª©ng animation"""
    
    def __init__(self, title, value, subtitle, color, trend_icon, parent=None):
        super().__init__(parent)
        self.color = color
        self.init_ui(title, subtitle, color, trend_icon)
        self.set_value(value)
        
    def init_ui(self, title, subtitle, color, trend_icon):
        self.setStyleSheet("""
            QFrame {
                background: white;
                border-radius: 12px;
                border: none;
            }
        """)
        self.setFixedHeight(110)  # Gi·∫£m chi·ªÅu cao xu·ªëng m·ªôt ch√∫t
        
        layout = QVBoxLayout(self)
        layout.setContentsMargins(15, 12, 15, 12)  # Gi·∫£m contentMargins
        layout.setSpacing(5)  # Gi·∫£m spacing
        
        # Header v·ªõi title v√† trend
        header_layout = QHBoxLayout()
        self.title_label = QLabel(title)
        self.title_label.setFont(QFont('Segoe UI', 12))
        self.title_label.setStyleSheet('color: #64748b;')
        header_layout.addWidget(self.title_label)
        
        header_layout.addStretch()
        
        self.trend_label = QLabel(trend_icon)
        self.trend_label.setFont(QFont('Segoe UI', 14))
        self.trend_label.setStyleSheet(f'color: {color};')
        header_layout.addWidget(self.trend_label)
        
        layout.addLayout(header_layout)
        
        # Animated value
        self.value_label = AnimatedNumberLabel()
        self.value_label.setFont(QFont('Segoe UI', 18, QFont.Bold))
        self.value_label.setStyleSheet(f'color: {color};')
        layout.addWidget(self.value_label)
        
        # Subtitle
        self.subtitle_label = QLabel(subtitle)
        self.subtitle_label.setFont(QFont('Segoe UI', 10))
        self.subtitle_label.setStyleSheet('color: #94a3b8;')
        layout.addWidget(self.subtitle_label)
        
    def set_value(self, value):
        """ƒê·∫∑t gi√° tr·ªã v√† b·∫Øt ƒë·∫ßu animation"""
        # Parse value n·∫øu l√† string c√≥ format ti·ªÅn t·ªá
        if isinstance(value, str):
            # Remove currency symbols and commas
            clean_value = value.replace('ƒë', '').replace(',', '').replace('.', '').strip()
            try:
                numeric_value = float(clean_value)
            except ValueError:
                numeric_value = 0
        else:
            numeric_value = float(value)
            
        self.value_label.set_target_value(numeric_value)
        
    def update_subtitle(self, new_subtitle):
        """C·∫≠p nh·∫≠t subtitle"""
        self.subtitle_label.setText(new_subtitle)
        
    def update_trend(self, new_trend_icon):
        """C·∫≠p nh·∫≠t trend icon"""
        self.trend_label.setText(new_trend_icon)

class SlideInWidget(QFrame):
    """Widget c√≥ hi·ªáu ·ª©ng slide in t·ª´ b√™n tr√°i"""
    
    def __init__(self, content_widget, parent=None):
        super().__init__(parent)
        self.content_widget = content_widget
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.addWidget(self.content_widget)
        
        # ·∫®n ban ƒë·∫ßu ·ªü b√™n tr√°i
        self.setGeometry(-self.width(), 0, self.width(), self.height())
        
    def slide_in(self, duration=800):
        """Hi·ªáu ·ª©ng slide in"""
        self.animation = QPropertyAnimation(self, b"geometry")
        self.animation.setDuration(duration)
        self.animation.setEasingCurve(QEasingCurve.OutCubic)
        
        # V·ªã tr√≠ cu·ªëi
        end_rect = QRect(0, 0, self.width(), self.height())
        self.animation.setEndValue(end_rect)
        
        self.animation.start()

class FadeInWidget(QFrame):
    """Widget c√≥ hi·ªáu ·ª©ng fade in"""
    
    def __init__(self, content_widget, parent=None):
        super().__init__(parent)
        self.content_widget = content_widget
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.addWidget(self.content_widget)
        
        # Trong su·ªët ban ƒë·∫ßu
        self.setStyleSheet("background: transparent;")
        
    def fade_in(self, duration=1000):
        """Hi·ªáu ·ª©ng fade in"""
        self.setStyleSheet("background: white;")

class StaggeredAnimationGroup:
    """Nh√≥m animation ch·∫°y l·∫ßn l∆∞·ª£t v·ªõi delay"""
    
    def __init__(self, widgets, delay=200):
        self.widgets = widgets
        self.delay = delay
        self.current_index = 0
        
        self.timer = QTimer()
        self.timer.timeout.connect(self.animate_next)
        
    def start_animations(self):
        """B·∫Øt ƒë·∫ßu animation cho t·∫•t c·∫£ widgets"""
        self.current_index = 0
        if self.widgets:
            self.animate_next()
            
    def animate_next(self):
        """Animate widget ti·∫øp theo"""
        if self.current_index < len(self.widgets):
            widget = self.widgets[self.current_index]
            
            # Trigger animation based on widget type
            if hasattr(widget, 'set_value'):
                # For AnimatedStatCard
                value = getattr(widget, '_target_value', 0)
                widget.set_value(value)
            elif hasattr(widget, 'slide_in'):
                widget.slide_in()
            elif hasattr(widget, 'fade_in'):
                widget.fade_in()
                
            self.current_index += 1
            
            # Schedule next animation
            if self.current_index < len(self.widgets):
                self.timer.singleShot(self.delay, self.animate_next)
        else:
            self.timer.stop()

def create_loading_dots_animation(label):
    """T·∫°o hi·ªáu ·ª©ng loading dots cho label"""
    dots = ["", ".", "..", "..."]
    current_dot = 0
    
    def update_dots():
        nonlocal current_dot
        base_text = label.text().rstrip('.')
        label.setText(base_text + dots[current_dot])
        current_dot = (current_dot + 1) % len(dots)
    
    timer = QTimer()
    timer.timeout.connect(update_dots)
    timer.start(500)  # Update every 500ms
    
    return timer

def shake_widget(widget, duration=300):
    """Hi·ªáu ·ª©ng l·∫Øc widget"""
    original_pos = widget.pos()
    
    animation = QPropertyAnimation(widget, b"pos")
    animation.setDuration(duration)
    animation.setLoopCount(3)
    
    # T·∫°o hi·ªáu ·ª©ng l·∫Øc
    shake_distance = 5
    animation.setKeyValueAt(0, original_pos)
    animation.setKeyValueAt(0.25, original_pos + QRect(shake_distance, 0, 0, 0).topLeft())
    animation.setKeyValueAt(0.75, original_pos + QRect(-shake_distance, 0, 0, 0).topLeft())
    animation.setKeyValueAt(1, original_pos)
    
    animation.start()
    return animation

def pulse_widget(widget, color="#3b82f6", duration=1000):
    """Hi·ªáu ·ª©ng pulse cho widget"""
    original_style = widget.styleSheet()
    
    def pulse_in():
        widget.setStyleSheet(f"""
            {original_style}
            border: 2px solid {color};
            background-color: rgba(59, 130, 246, 0.1);
        """)
        
    def pulse_out():
        widget.setStyleSheet(original_style)
    
    # T·∫°o sequence animation
    timer1 = QTimer()
    timer2 = QTimer()
    
    timer1.singleShot(0, pulse_in)
    timer2.singleShot(duration // 2, pulse_out)
    
    return timer1, timer2
