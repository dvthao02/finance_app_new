from PyQt5.QtWidgets import QWidget, QHBoxLayout, QVBoxLayout, QLabel, QPushButton, QFrame, QComboBox, QSizePolicy, QStackedWidget, QLineEdit
from PyQt5.QtGui import QFont, QIcon, QPixmap, QColor, QPalette
from PyQt5.QtCore import Qt, QSize, pyqtSignal, QTimer
import os


class BaseDashboard(QWidget):
    logout_signal = pyqtSignal()
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.current_user = None
        self.sidebar_buttons = []
        self.content_stack = None
        self.current_tab_index = 0
        self.init_ui()
    
    def init_ui(self):
        """Kh·ªüi t·∫°o c·∫•u tr√∫c UI c∆° s·ªü""" # ƒê√£ d·ªãch
        self.setWindowTitle(self.get_dashboard_title())
        self.setMinimumSize(1350, 850)
          # ƒê·∫∑t style m·∫∑c ƒë·ªãnh to√†n di·ªán ƒë·ªÉ h√†i h√≤a h∆°n
        self.setStyleSheet("""
            /* Ki·ªÉu m·∫∑c ƒë·ªãnh to√†n c·ª•c - TƒÉng k√≠ch th∆∞·ªõc font */
            QWidget { 
                background-color: #f8fafc; 
                font-family: 'Segoe UI', sans-serif;
                font-size: 16px;
                color: #1e293b;
            }
            
            /* Ki·ªÉu Label */
            QLabel {
                color: #334155;
                font-size: 16px;
            }
            
            /* Ki·ªÉu Button */
            QPushButton {
                font-size: 16px;
                font-weight: 500;
                padding: 10px 18px;
                border-radius: 6px;
                border: 1px solid #e2e8f0;
                background: white;
                color: #374151;
                min-height: 22px;
            }
            QPushButton:hover {
                background: #f9fafb;
                border-color: #d1d5db;
            }
            QPushButton:pressed {
                background: #f3f4f6;
            }
            
            /* Ki·ªÉu Input */
            QLineEdit, QComboBox {
                font-size: 16px;
                padding: 10px 14px;
                border: 1px solid #d1d5db;
                border-radius: 6px;
                background: white;
                color: #374151;
                min-height: 18px;
            }
            QLineEdit:focus, QComboBox:focus {
                border-color: #3b82f6;
            }
            
            /* Ki·ªÉu Table */
            QTableWidget {
                font-size: 16px;
                gridline-color: #f1f5f9;
                background: white;
                selection-background-color: #eff6ff;
                border: 1px solid #e2e8f0;
                border-radius: 8px;
            }
            QTableWidget::item {
                padding: 12px 14px;
                border-bottom: 1px solid #f1f5f9;
            }
            QHeaderView::section {
                background: #f8fafc;
                padding: 14px;
                border: none;
                border-bottom: 1px solid #e2e8f0;
                font-weight: 600;
                font-size: 14px;
                color: #6b7280;
            }
            
            /* Ki·ªÉu Frame */
            QFrame {
                border-radius: 8px;
            }
        """)

        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)

        # Ti√™u ƒë·ªÅ
        header = self.create_header()
        main_layout.addWidget(header)
        
        # Ph·∫ßn th√¢n v·ªõi sidebar v√† n·ªôi dung
        body_layout = QHBoxLayout()
        body_layout.setContentsMargins(0, 0, 0, 0)
        body_layout.setSpacing(0)

        # Thanh b√™n
        sidebar = self.create_sidebar()
        body_layout.addWidget(sidebar)

        # Khu v·ª±c n·ªôi dung ch√≠nh
        self.content_stack = QStackedWidget()
        self.content_stack.setMinimumWidth(800)
        self.content_stack.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
          # Th√™m content_stack v√†o body_layout
        body_layout.addWidget(self.content_stack)
        main_layout.addLayout(body_layout)

    def create_header(self):
        header = QFrame()
        header.setFixedHeight(70)
        
        # √âP BU·ªòC N·ªÄN M√ÄU XANH - ƒë·∫£m b·∫£o ch·∫Øc ch·∫Øn c√≥ m√†u xanh
        header.setAutoFillBackground(True)
        header.setStyleSheet("""
            QFrame {
                background-color: #3b82f6 !important;
                background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0, 
                    stop: 0 #1e40af, stop: 0.5 #3b82f6, stop: 1 #06b6d4) !important;
                border: none !important;
            }
        """)
        
        layout = QHBoxLayout(header)
        layout.setContentsMargins(24, 0, 24, 0)
        layout.setSpacing(20)
        
        # Logo v√† t√™n ·ª©ng d·ª•ng
        logo_layout = QHBoxLayout()
        logo_layout.setSpacing(12)
        
        logo = QLabel()
        logo.setStyleSheet("color: white !important; background: transparent;")
        try:
            logo_path = self.get_asset_path('app_icon.png')
            if os.path.exists(logo_path):
                logo.setPixmap(QPixmap(logo_path).scaled(36, 36, Qt.KeepAspectRatio, Qt.SmoothTransformation))
            else:
                logo.setText('üíº')
                logo.setFont(QFont('Segoe UI', 20))
                logo.setStyleSheet("color: white !important; background: transparent;")
        except:
            logo.setText('üíº')
            logo.setFont(QFont('Segoe UI', 20))
            logo.setStyleSheet("color: white !important; background: transparent;")
        logo_layout.addWidget(logo)
        
        app_name = QLabel(self.get_dashboard_title())
        app_name.setFont(QFont('Segoe UI', 18, QFont.Bold))
        app_name.setStyleSheet('color: white !important; font-weight: 600; background: transparent;')
        logo_layout.addWidget(app_name)
        
        layout.addLayout(logo_layout)
        layout.addStretch()
        
        layout.addStretch()
        
        # Chu√¥ng th√¥ng b√°o
        self.notification_btn = QPushButton('üîî')
        self.notification_btn.setFont(QFont('Segoe UI', 16))
        self.notification_btn.setFixedSize(44, 44)
        self.notification_btn.setStyleSheet("""
            QPushButton {
                color: white !important;
                background: rgba(255,255,255,0.15) !important;
                border: 1px solid rgba(255,255,255,0.2);
                border-radius: 22px;
                font-size: 16px;
            }
            QPushButton:hover {
                background: rgba(255,255,255,0.25) !important;
                border-color: rgba(255,255,255,0.3);
                color: white !important;
            }
            QPushButton:pressed {
                background: rgba(255,255,255,0.1) !important;
                color: white !important;
            }
        """)
        layout.addWidget(self.notification_btn)
        
        # Th√¥ng tin ng∆∞·ªùi d√πng (c√≥ th·ªÉ nh·∫•p chu·ªôt)
        user_name = self.current_user.get('full_name', self.current_user.get('name', 'User')) if self.current_user else 'User'
        # L·∫•y avatar qua UserManager ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√∫ng logic
        from data_manager.user_manager import UserManager
        user_manager = UserManager()
        user_avatar = user_manager.get_user_avatar(self.current_user.get('username')) if self.current_user else 'assets/avatar_user_001.jpg'
        self.user_button = QPushButton(f'  {user_name}')
        self.user_button.setFont(QFont('Segoe UI', 13, QFont.Medium))
        self.user_button.setStyleSheet("""
            QPushButton {
                padding: 6px 16px;
                border-radius: 18px;
                background: #e0f2fe;
                color: #0f172a;
                font-weight: 500;
                text-align: left;
            }
        """)
        # Set avatar icon (bo tr√≤n)
        from PyQt5.QtGui import QIcon, QPixmap, QPainterPath, QPainter
        def get_rounded_avatar(path, size=32):
            pixmap = QPixmap(path).scaled(size, size, Qt.KeepAspectRatioByExpanding, Qt.SmoothTransformation)
            rounded = QPixmap(size, size)
            rounded.fill(Qt.transparent)
            painter = QPainter(rounded)
            painter.setRenderHint(QPainter.Antialiasing)
            path = QPainterPath()
            path.addEllipse(0, 0, size, size)
            painter.setClipPath(path)
            painter.drawPixmap(0, 0, pixmap)
            painter.end()
            return rounded
        avatar_icon = QIcon(get_rounded_avatar(user_avatar, 32))
        self.user_button.setIcon(avatar_icon)
        self.user_button.setIconSize(QSize(32, 32))
        self.user_button.clicked.connect(self.show_profile)
        layout.addWidget(self.user_button)
        
        return header

    def create_sidebar(self):
        sidebar = QFrame()
        sidebar.setFixedWidth(260)  # TƒÉng width m·ªôt ch√∫t ƒë·ªÉ ph√π h·ª£p v·ªõi font l·ªõn h∆°n
        sidebar.setStyleSheet("""
            QFrame {
                background: linear-gradient(180deg, #f8fafc 0%, #f1f5f9 100%);
                border-right: 1px solid #e2e8f0;
                border-radius: 0px;
            }
        """)
        
        layout = QVBoxLayout(sidebar)
        layout.setContentsMargins(0, 24, 0, 24)
        layout.setSpacing(6)
        
        # M·ª•c menu
        self.sidebar_buttons = []
        nav_items = self.get_navigation_items()
        
        for i, (text, icon_name) in enumerate(nav_items):
            btn = QPushButton(f"  {text}")
            btn.setFont(QFont('Segoe UI', 15, QFont.Medium))  # TƒÉng font size l√™n 15
            btn.setFixedHeight(52)  # TƒÉng height ƒë·ªÉ ph√π h·ª£p
            btn.setCursor(Qt.PointingHandCursor)
            btn.setCheckable(True)
            
            if i == 0:  # M·ª•c ƒë·∫ßu ti√™n ƒë∆∞·ª£c ch·ªçn m·∫∑c ƒë·ªãnh
                btn.setStyleSheet("""
                    QPushButton {
                        text-align: left;
                        padding-left: 22px;
                        border: none;
                        border-radius: 10px;
                        background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0, 
                            stop: 0 #3b82f6, stop: 1 #06b6d4);
                        color: white;
                        margin: 3px 12px;
                        font-weight: 600;
                        font-size: 15px;
                    }
                    QPushButton:hover {
                        background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0, 
                            stop: 0 #2563eb, stop: 1 #0891b2);
                    }
                """)
                btn.setChecked(True)
            else:
                btn.setStyleSheet("""
                    QPushButton {
                        text-align: left;
                        padding-left: 22px;
                        border: none;
                        border-radius: 10px;
                        background: transparent;
                        color: #64748b;
                        margin: 3px 12px;
                        font-weight: 500;
                        font-size: 15px;
                    }
                    QPushButton:hover {
                        background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0, 
                            stop: 0 #f0f9ff, stop: 1 #e0f2fe);
                        color: #0369a1;
                        border-left: 4px solid #3b82f6;
                    }
                """)
            btn.clicked.connect(lambda checked, idx=i: self.switch_tab(idx))
            layout.addWidget(btn)
            self.sidebar_buttons.append(btn)
        
        layout.addStretch()
        
        # N√∫t ƒëƒÉng xu·∫•t ·ªü d∆∞·ªõi c√πng
        logout_btn = QPushButton('üö™  ƒêƒÉng xu·∫•t')
        logout_btn.setFont(QFont('Segoe UI', 15, QFont.Medium))
        logout_btn.setFixedHeight(50)
        logout_btn.setCursor(Qt.PointingHandCursor)
        logout_btn.setStyleSheet("""
            QPushButton {
                text-align: left;
                padding-left: 22px;
                border: none;
                border-radius: 10px;
                background: transparent;
                color: #dc2626;
                margin: 3px 12px;
                font-weight: 500;
                font-size: 15px;
            }
            QPushButton:hover {
                background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0, 
                    stop: 0 #fef2f2, stop: 1 #fee2e2);
                color: #b91c1c;
                border-left: 4px solid #dc2626;
            }
        """)
        logout_btn.clicked.connect(self.handle_logout)
        layout.addWidget(logout_btn)
        
        return sidebar

    def switch_tab(self, index):
        """Chuy·ªÉn ƒë·ªïi sang tab kh√°c v·ªõi hi·ªáu ·ª©ng m∆∞·ª£t m√†"""
        print(f"DEBUG: Switching to tab index {index}")
          # C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t v·ªõi ph·∫£n h·ªìi h√¨nh ·∫£nh
        for i, btn in enumerate(self.sidebar_buttons):
            if i == index:
                btn.setStyleSheet("""
                    QPushButton {
                        text-align: left;
                        padding-left: 22px;
                        border: none;
                        border-radius: 10px;
                        background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0, 
                            stop: 0 #3b82f6, stop: 1 #06b6d4);
                        color: white;
                        margin: 3px 12px;
                        font-weight: 600;
                        font-size: 15px;
                    }
                """)
                btn.setChecked(True)
            else:
                btn.setStyleSheet("""
                    QPushButton {
                        text-align: left;
                        padding-left: 22px;
                        border: none;
                        border-radius: 10px;
                        background: transparent;
                        color: #64748b;
                        margin: 3px 12px;
                        font-weight: 500;
                        font-size: 15px;
                    }
                    QPushButton:hover {
                        background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0, 
                            stop: 0 #f0f9ff, stop: 1 #e0f2fe);
                        color: #0369a1;
                        border-left: 4px solid #3b82f6;
                    }
                """)
                btn.setChecked(False)
        
        # Chuy·ªÉn ƒë·ªïi n·ªôi dung v·ªõi ki·ªÉm tra l·ªói
                # Switch content with error checking
        if self.content_stack and 0 <= index < self.content_stack.count():
            self.content_stack.setCurrentIndex(index)
            self.current_tab_index = index
            
            # Ensure the current widget is visible
            current_widget = self.content_stack.currentWidget()
            if current_widget:
                current_widget.setVisible(True)
                current_widget.show()
                print(f"DEBUG: Switched to tab {index}, widget: {current_widget}")
                print(f"DEBUG: Widget visible: {current_widget.isVisible()}")
            
            self.on_tab_changed(index)
        else:
            print(f"DEBUG: Cannot switch to tab {index} - stack count: {self.content_stack.count() if self.content_stack else 'None'}")
    
    def get_asset_path(self, filename):
        """L·∫•y ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß t·ªõi t·ªáp tin t√†i s·∫£n"""
        # L·∫•y th∆∞ m·ª•c n∆°i k·ªãch b·∫£n ƒëang ƒë∆∞·ª£c th·ª±c thi
        current_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        return os.path.join(current_dir, 'assets', filename)
    
    def add_content_widget(self, widget):
        """Th√™m m·ªôt widget v√†o ngƒÉn x·∫øp n·ªôi dung"""
        print(f"DEBUG: add_content_widget called, content_stack: {self.content_stack}")
        print(f"DEBUG: content_stack type: {type(self.content_stack)}")
        print(f"DEBUG: content_stack is not None: {self.content_stack is not None}")
        if self.content_stack is not None:
            self.content_stack.addWidget(widget)
            print(f"DEBUG: Widget added, stack count now: {self.content_stack.count()}")
        else:
            print("ERROR: content_stack is None in add_content_widget!")
    
    def set_current_user(self, user):
        """ƒê·∫∑t ng∆∞·ªùi d√πng hi·ªán t·∫°i v√† c·∫≠p nh·∫≠t UI"""
        self.current_user = user
        self.update_user_info()
        # C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng
        self.update_header()
        # Hi·ªÉn th·ªã th√¥ng b√°o ch√†o m·ª´ng sau m·ªôt kho·∫£ng th·ªùi gian ng·∫Øn
        QTimer.singleShot(1500, self.show_welcome_toast)
    
    def update_header(self):
        """C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ v·ªõi th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i"""
        # T√¨m v√† c·∫≠p nh·∫≠t ti√™u ƒë·ªÅ
        main_layout = self.layout()
        if main_layout and main_layout.count() > 0:
            # X√≥a ti√™u ƒë·ªÅ c≈©
            old_header = main_layout.itemAt(0).widget()
            if old_header:
                old_header.setParent(None)
            
            # T·∫°o ti√™u ƒë·ªÅ m·ªõi v·ªõi th√¥ng tin ng∆∞·ªùi d√πng
            new_header = self.create_header()
            main_layout.insertWidget(0, new_header)
    
    def update_user_info(self):
        """C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng trong ti√™u ƒë·ªÅ"""
        # Ch·ª©c nƒÉng n√†y s·∫Ω ƒë∆∞·ª£c c√°c l·ªõp con tri·ªÉn khai n·∫øu c·∫ßn thi·∫øt
        pass
    
    def handle_logout(self):
        """X·ª≠ l√Ω h√†nh ƒë·ªông ƒëƒÉng xu·∫•t"""
        self.logout_signal.emit()
    
    def show_profile(self):
        """Hi·ªÉn th·ªã tab h·ªì s∆° - ch·ª©c nƒÉng n√†y s·∫Ω ƒë∆∞·ª£c c√°c l·ªõp con tri·ªÉn khai"""
        # ƒê·ªëi v·ªõi b·∫£ng ƒëi·ªÅu khi·ªÉn qu·∫£n tr·ªã vi√™n, chuy·ªÉn sang tab h·ªì s∆°
        if hasattr(self, 'switch_tab'):
            profile_tab_index = 5  # Tab h·ªì s∆° th∆∞·ªùng ·ªü ch·ªâ m·ª•c 5
            self.switch_tab(profile_tab_index)
        else:
            print("Ch·ª©c nƒÉng h·ªì s∆° ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai cho b·∫£ng ƒëi·ªÅu khi·ªÉn n√†y")
    
    def on_tab_changed(self, index):
        """ƒê∆∞·ª£c g·ªçi khi tab ƒë∆∞·ª£c thay ƒë·ªïi - ch·ª©c nƒÉng n√†y s·∫Ω ƒë∆∞·ª£c c√°c l·ªõp con tri·ªÉn khai"""
        pass
    
    # C√°c ph∆∞∆°ng th·ª©c tr·ª´u t∆∞·ª£ng ƒë·ªÉ ƒë∆∞·ª£c c√°c l·ªõp con tri·ªÉn khai
    def get_dashboard_title(self):
        """Tr·∫£ v·ªÅ ti√™u ƒë·ªÅ b·∫£ng ƒëi·ªÅu khi·ªÉn"""
        return "Dashboard"
    
    def get_navigation_items(self):
        """Tr·∫£ v·ªÅ danh s√°ch c√°c b·ªô (vƒÉn b·∫£n, t√™n bi·ªÉu t∆∞·ª£ng) cho ƒëi·ªÅu h∆∞·ªõng"""
        return [
            ("Trang ch·ªß", "app_icon.png"),
        ]
    
    def show_welcome_toast(self):
        """Hi·ªÉn th·ªã th√¥ng ƒëi·ªáp ch√†o m·ª´ng - ch·ª©c nƒÉng n√†y s·∫Ω ƒë∆∞·ª£c c√°c l·ªõp con tri·ªÉn khai"""
        if self.current_user:
            try:
                from gui.user.user_notifications_tab import show_welcome_message
                show_welcome_message(self.current_user, self)
            except Exception as e:
                print(f"Error showing welcome toast: {e}")
    
    # --- Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc ---
        from data_manager.notification_manager import NotificationManager
        self.notification_manager = NotificationManager()
        unread_count = 0
        if self.current_user:
            unread_count = self.notification_manager.get_unread_count(self.current_user.get('user_id'))
        if unread_count > 0:
            self.notification_btn.setText(f'üîî {unread_count}')
        else:
            self.notification_btn.setText('üîî')
        self.notification_btn.clicked.connect(self.show_user_notifications)
        # ---
    
    def show_user_notifications(self):
        """Hi·ªÉn th·ªã danh s√°ch th√¥ng b√°o c·ªßa user khi b·∫•m chu√¥ng"""
        if not self.current_user:
            return
        user_id = self.current_user.get('user_id')
        notifications = self.notification_manager.get_user_notifications(user_id)
        if not notifications:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.information(self, 'Th√¥ng b√°o', 'B·∫°n kh√¥ng c√≥ th√¥ng b√°o n√†o!')
            return
        # ƒê√°nh d·∫•u t·∫•t c·∫£ l√† ƒë√£ ƒë·ªçc
        self.notification_manager.mark_all_as_read(user_id)
        # Hi·ªÉn th·ªã danh s√°ch th√¥ng b√°o (d·∫°ng popup ƒë∆°n gi·∫£n)
        from PyQt5.QtWidgets import QDialog, QVBoxLayout, QLabel, QScrollArea, QWidget
        dialog = QDialog(self)
        dialog.setWindowTitle('Th√¥ng b√°o c·ªßa b·∫°n')
        dialog.setMinimumWidth(420)
        layout = QVBoxLayout(dialog)
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        content = QWidget()
        vbox = QVBoxLayout(content)
        for n in sorted(notifications, key=lambda x: x.get('created_at', ''), reverse=True):
            label = QLabel(f"<b>{n.get('title')}</b><br>{n.get('content')}<br><span style='color:gray;font-size:12px'>{n.get('created_at')}</span>")
            label.setWordWrap(True)
            vbox.addWidget(label)
        content.setLayout(vbox)
        scroll.setWidget(content)
        layout.addWidget(scroll)
        dialog.setLayout(layout)
        dialog.exec_()
        # Sau khi ƒë√≥ng popup, c·∫≠p nh·∫≠t l·∫°i s·ªë l∆∞·ª£ng tr√™n n√∫t chu√¥ng
        self.notification_btn.setText('üîî')
