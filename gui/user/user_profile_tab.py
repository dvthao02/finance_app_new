from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, 
                            QLineEdit, QFrame, QGridLayout, QSpacerItem, QSizePolicy,
                            QMessageBox, QDateEdit, QComboBox, QTextEdit, QFileDialog,
                            QDialog)
from PyQt5.QtCore import Qt, QDate, pyqtSignal
from PyQt5.QtGui import QFont, QPixmap, QPainter, QBrush, QColor
import datetime
import json
import os

class UserProfile(QWidget):
    """
    Tab hi·ªÉn th·ªã v√† ch·ªânh s·ª≠a th√¥ng tin profile c·ªßa user
    """
    profile_updated = pyqtSignal()  # Signal khi c·∫≠p nh·∫≠t profile
    logout_requested = pyqtSignal()  # Signal khi logout
    
    def __init__(self, user_manager, parent=None):
        super().__init__(parent)
        self.user_manager = user_manager
        self.current_user = getattr(user_manager, 'current_user', {})
        self.avatar_path = None  # Th√™m bi·∫øn l∆∞u ƒë∆∞·ªùng d·∫´n avatar m·ªõi
        self.init_ui()
        self.load_user_data()

    def init_ui(self):
        self.setWindowTitle('üë§ Th√¥ng tin c√° nh√¢n')
        # No fixed size for a tab, allow it to resize with the window
        
        # Main layout
        layout = QVBoxLayout()
        layout.setSpacing(20)
        layout.setContentsMargins(30, 30, 30, 30)
        
        # Header v·ªõi avatar
        header_frame = QFrame()
        header_frame.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #667eea, stop:1 #764ba2);
                border-radius: 15px;
                padding: 25px;
                margin-bottom: 10px;
            }
        """)
        
        header_layout = QVBoxLayout()
        
        # Avatar placeholder
        self.avatar_label = QLabel()
        self.avatar_label.setFixedSize(80, 80)
        self.avatar_label.setAlignment(Qt.AlignCenter)
        self.avatar_label.setStyleSheet("""
            QLabel {
                background-color: rgba(255, 255, 255, 0.3);
                border-radius: 40px;
                color: white;
                font-size: 24px;
                font-weight: bold;
            }
        """)
        
        # Th√™m n√∫t ch·ªçn ·∫£nh ƒë·∫°i di·ªán
        self.btn_avatar = QPushButton("üì∑ Ch·ªçn ·∫£nh")
        self.btn_avatar.setStyleSheet("""
            QPushButton {
                background-color: rgba(255, 255, 255, 0.2);
                border: none;
                border-radius: 15px;
                color: white;
                padding: 8px 15px;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: rgba(255, 255, 255, 0.3);
            }
        """)
        self.btn_avatar.clicked.connect(self.choose_avatar)
        
        # User name
        self.header_name = QLabel()
        self.header_name.setStyleSheet("""
            QLabel {
                color: white;
                font-size: 18px;
                font-weight: bold;
                background: transparent;
                margin-top: 10px;
            }
        """)
        self.header_name.setAlignment(Qt.AlignCenter)
        
        # User role
        self.header_role = QLabel()
        self.header_role.setStyleSheet("""
            QLabel {
                color: rgba(255, 255, 255, 0.8);
                font-size: 14px;
                background: transparent;
                margin-top: 5px;
            }
        """)
        self.header_role.setAlignment(Qt.AlignCenter)
        
        header_layout.addWidget(self.avatar_label, alignment=Qt.AlignCenter)
        header_layout.addWidget(self.btn_avatar, alignment=Qt.AlignCenter)
        header_layout.addWidget(self.header_name)
        header_layout.addWidget(self.header_role)
        
        header_frame.setLayout(header_layout)
        layout.addWidget(header_frame)
        
        # Form fields
        form_frame = QFrame()
        form_frame.setStyleSheet("""
            QFrame {
                background-color: white;
                border-radius: 12px;
                border: 1px solid #e2e8f0;
                padding: 25px;
            }
        """)
        
        form_layout = QGridLayout()
        form_layout.setSpacing(15)
        
        # Input field style
        input_style = """
            QLineEdit, QComboBox, QDateEdit, QTextEdit {
                padding: 12px 15px;
                border: 2px solid #e2e8f0;
                border-radius: 8px;
                font-size: 14px;
                background-color: #f8fafc;
            }
            QLineEdit:focus, QComboBox:focus, QDateEdit:focus, QTextEdit:focus {
                border-color: #667eea;
                background-color: white;
            }
        """
        
        label_style = """
            QLabel {
                color: #374151;
                font-weight: 600;
                font-size: 14px;
            }
        """
        
        # T√™n ƒë·∫ßy ƒë·ªß
        name_label = QLabel('üë§ H·ªç v√† t√™n:')
        name_label.setStyleSheet(label_style)
        self.name_input = QLineEdit()
        self.name_input.setStyleSheet(input_style)
        
        # Email
        email_label = QLabel('üìß Email:')
        email_label.setStyleSheet(label_style)
        self.email_input = QLineEdit()
        self.email_input.setStyleSheet(input_style)
        
        # S·ªë ƒëi·ªán tho·∫°i
        phone_label = QLabel('üì± S·ªë ƒëi·ªán tho·∫°i:')
        phone_label.setStyleSheet(label_style)
        self.phone_input = QLineEdit()
        self.phone_input.setStyleSheet(input_style)
        
        # Ng√†y sinh
        birthday_label = QLabel('üéÇ Ng√†y sinh:')
        birthday_label.setStyleSheet(label_style)
        self.birthday_input = QDateEdit()
        self.birthday_input.setCalendarPopup(True)
        self.birthday_input.setDisplayFormat('dd/MM/yyyy')
        self.birthday_input.setStyleSheet(input_style)
        
        # Gi·ªõi t√≠nh
        gender_label = QLabel('üë• Gi·ªõi t√≠nh:')
        gender_label.setStyleSheet(label_style)
        self.gender_combo = QComboBox()
        self.gender_combo.addItems(['Nam', 'N·ªØ', 'Kh√°c'])
        self.gender_combo.setStyleSheet(input_style)
        
        # ƒê·ªãa ch·ªâ
        address_label = QLabel('üè† ƒê·ªãa ch·ªâ:')
        address_label.setStyleSheet(label_style)
        self.address_input = QTextEdit()
        self.address_input.setMaximumHeight(80)
        self.address_input.setStyleSheet(input_style)
        
        # Layout form fields
        form_layout.addWidget(name_label, 0, 0)
        form_layout.addWidget(self.name_input, 0, 1)
        
        form_layout.addWidget(email_label, 1, 0)
        form_layout.addWidget(self.email_input, 1, 1)
        
        form_layout.addWidget(phone_label, 2, 0)
        form_layout.addWidget(self.phone_input, 2, 1)
        
        form_layout.addWidget(birthday_label, 3, 0)
        form_layout.addWidget(self.birthday_input, 3, 1)
        
        form_layout.addWidget(gender_label, 4, 0)
        form_layout.addWidget(self.gender_combo, 4, 1)
        
        form_layout.addWidget(address_label, 5, 0)
        form_layout.addWidget(self.address_input, 5, 1)
        
        form_frame.setLayout(form_layout)
        layout.addWidget(form_frame)
        
        # Buttons
        buttons_frame = QFrame()
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(15)
        
        # Change password button
        btn_change_password = QPushButton('üîë ƒê·ªïi m·∫≠t kh·∫©u')
        btn_change_password.setStyleSheet("""
            QPushButton {
                background: #f59e0b;
                color: white;
                border: none;
                border-radius: 8px;
                padding: 12px 20px;
                font-weight: 600;
                font-size: 14px;
            }
            QPushButton:hover {
                background: #d97706;
            }
        """)
        btn_change_password.clicked.connect(self.change_password)
        
        # Logout button
        btn_logout = QPushButton('üö™ ƒêƒÉng xu·∫•t')
        btn_logout.setStyleSheet("""
            QPushButton {
                background: #ef4444;
                color: white;
                border: none;
                border-radius: 8px;
                padding: 12px 20px;
                font-weight: 600;
                font-size: 14px;
            }
            QPushButton:hover {
                background: #dc2626;
            }
        """)
        btn_logout.clicked.connect(self.logout)
        
        # Save button
        btn_save = QPushButton('üíæ L∆∞u thay ƒë·ªïi')
        btn_save.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #667eea, stop:1 #764ba2);
                color: white;
                border: none;
                border-radius: 8px;
                padding: 12px 20px;
                font-weight: 600;
                font-size: 14px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #5a67d8, stop:1 #6b46c1);
            }
        """)
        btn_save.clicked.connect(self.save_profile)
        
        # Cancel button
        btn_cancel = QPushButton('‚ùå H·ªßy')
        btn_cancel.setStyleSheet("""
            QPushButton {
                background: #6b7280;
                color: white;
                border: none;
                border-radius: 8px;
                padding: 12px 20px;
                font-weight: 600;
                font-size: 14px;
            }
            QPushButton:hover {
                background: #4b5563;
            }
        """)
        btn_cancel.clicked.connect(self.cancel_changes)
        
        buttons_layout.addWidget(btn_change_password)
        buttons_layout.addWidget(btn_logout)
        buttons_layout.addStretch()
        buttons_layout.addWidget(btn_cancel)
        buttons_layout.addWidget(btn_save)
        
        buttons_frame.setLayout(buttons_layout)
        layout.addWidget(buttons_frame)
        
        self.setLayout(layout)
        
        # Set style for the widget
        self.setStyleSheet("""
            QWidget {
                background-color: #f1f5f9;
            }
        """)
        
    def load_user_data(self):
        """Load d·ªØ li·ªáu user v√†o form"""
        if not self.current_user:
            return
        
        # Header info
        user_name = self.current_user.get('name', 'Unknown User')
        user_role = 'Ng∆∞·ªùi d√πng' if self.current_user.get('role') == 'user' else 'Qu·∫£n tr·ªã vi√™n'
        
        self.header_name.setText(user_name)
        self.header_role.setText(f'üéØ {user_role}')
        
        # Th·ª≠ t·∫£i avatar t·ª´ ƒë∆∞·ªùng d·∫´n
        avatar_path = self.current_user.get('avatar')
        if not self.load_avatar(avatar_path):
            # N·∫øu kh√¥ng c√≥ ·∫£nh ho·∫∑c kh√¥ng t·∫£i ƒë∆∞·ª£c, hi·ªÉn th·ªã ch·ªØ c√°i ƒë·∫ßu
            initials = ''.join([word[0].upper() for word in user_name.split()[:2]])
            self.avatar_label.setText(initials)
        
        # Form fields
        self.name_input.setText(self.current_user.get('name', ''))
        self.email_input.setText(self.current_user.get('email', ''))
        self.phone_input.setText(self.current_user.get('phone', ''))
        
        # Birthday
        birthday_str = self.current_user.get('birthday', '')
        if birthday_str:
            try:
                birthday = datetime.datetime.strptime(birthday_str, '%Y-%m-%d').date()
                self.birthday_input.setDate(QDate(birthday))
            except:
                self.birthday_input.setDate(QDate.currentDate().addYears(-25))
        else:
            self.birthday_input.setDate(QDate.currentDate().addYears(-25))
        
        # Gender
        gender = self.current_user.get('gender', 'Nam')
        index = self.gender_combo.findText(gender)
        if index >= 0:
            self.gender_combo.setCurrentIndex(index)
        
        # Address
        self.address_input.setPlainText(self.current_user.get('address', ''))        # Avatar
        avatar_path = self.current_user.get('avatar')
        self.load_avatar(avatar_path)
        
    def save_profile(self):
        """L∆∞u th√¥ng tin profile"""
        try:
            # Validate data
            name = self.name_input.text().strip()
            email = self.email_input.text().strip()
            
            if not name:
                QMessageBox.warning(self, '‚ö†Ô∏è L·ªói', 'Vui l√≤ng nh·∫≠p h·ªç t√™n!')
                return
            
            if not email:
                QMessageBox.warning(self, '‚ö†Ô∏è L·ªói', 'Vui l√≤ng nh·∫≠p email!')
                return
            
            # X·ª≠ l√Ω avatar n·∫øu c√≥
            avatar_path = None
            if self.avatar_path:
                # Sao ch√©p avatar v√†o th∆∞ m·ª•c assets
                user_id = self.current_user.get('id')
                if user_id:
                    from utils.file_helper import copy_avatar_to_assets
                    avatar_path = copy_avatar_to_assets(self.avatar_path, user_id)
                    if not avatar_path:
                        QMessageBox.warning(self, "C·∫£nh b√°o", "Kh√¥ng th·ªÉ sao ch√©p ·∫£nh ƒë·∫°i di·ªán v√†o th∆∞ m·ª•c assets. S·∫Ω gi·ªØ nguy√™n ·∫£nh hi·ªán t·∫°i.")
            
            # Update user data
            updated_user = self.current_user.copy()
            updated_user.update({
                'name': name,
                'email': email,
                'phone': self.phone_input.text().strip(),
                'birthday': self.birthday_input.date().toString('yyyy-MM-dd'),
                'gender': self.gender_combo.currentText(),
                'address': self.address_input.toPlainText().strip(),
                'updated_at': datetime.datetime.now().isoformat()
            })
            
            # C·∫≠p nh·∫≠t avatar n·∫øu c√≥
            if avatar_path:
                updated_user['avatar'] = avatar_path
                
            # Load all users
            package_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
            users_file_path = os.path.join(package_dir, 'data', 'users.json')
            with open(users_file_path, 'r', encoding='utf-8') as f:
                all_users = json.load(f)
            
            # Update user in list
            user_id = self.current_user.get('id')
            for i, user in enumerate(all_users):
                if user.get('id') == user_id:
                    all_users[i] = updated_user
                    break
            
            # Save to file
            with open(users_file_path, 'w', encoding='utf-8') as f:
                json.dump(all_users, f, ensure_ascii=False, indent=2)
            
            # Update user manager
            self.user_manager.current_user = updated_user
            if hasattr(self.user_manager, 'users'):
                self.user_manager.users = all_users
            
            # Reset avatar path sau khi ƒë√£ l∆∞u
            self.avatar_path = None
            
            QMessageBox.information(self, '‚úÖ Th√†nh c√¥ng', 
                                  'ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n th√†nh c√¥ng!')
            
            # Emit signal
            self.profile_updated.emit()
            
            # Update header
            self.load_user_data()
            
        except Exception as e:
            QMessageBox.critical(self, '‚ùå L·ªói', 
                               f'Kh√¥ng th·ªÉ l∆∞u th√¥ng tin:\n{str(e)}')

    def change_password(self):
        """Dialog ƒë·ªïi m·∫≠t kh·∫©u"""
        from .user_change_password import ChangePasswordDialog
        
        dialog = ChangePasswordDialog(self.user_manager, self)
        if dialog.exec_() == QDialog.Accepted:
            QMessageBox.information(self, '‚úÖ Th√†nh c√¥ng', 
                                  'ƒê√£ ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!')

    def logout(self):
        """X·ª≠ l√Ω logout"""
        reply = QMessageBox.question(self, '‚ùì X√°c nh·∫≠n ƒëƒÉng xu·∫•t',
                                   'B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t kh·ªèi ·ª©ng d·ª•ng?',
                                   QMessageBox.Yes | QMessageBox.No,
                                   QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            self.logout_requested.emit()

    def choose_avatar(self):
        """Ch·ªçn ·∫£nh ƒë·∫°i di·ªán t·ª´ file h·ªá th·ªëng"""
        file_path, _ = QFileDialog.getOpenFileName(self, "Ch·ªçn ·∫£nh ƒë·∫°i di·ªán", "", "Image Files (*.png *.jpg *.jpeg *.bmp)")
        
        if file_path:
            # Hi·ªÉn th·ªã ·∫£nh ƒë·∫°i di·ªán ƒë√£ ch·ªçn
            pixmap = QPixmap(file_path)
            if not pixmap.isNull():
                self.avatar_path = file_path  # L∆∞u ƒë∆∞·ªùng d·∫´n ·∫£nh ƒë·ªÉ c·∫≠p nh·∫≠t sau
                # Hi·ªÉn th·ªã ·∫£nh tr√≤n
                size = min(pixmap.width(), pixmap.height())
                pixmap = pixmap.scaled(80, 80, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                self.avatar_label.setPixmap(pixmap)
                self.avatar_label.setText("")  # X√≥a ch·ªØ c√°i ƒë·∫ßu
                
                # Th√¥ng b√°o ng∆∞·ªùi d√πng nh·∫•n l∆∞u ƒë·ªÉ c·∫≠p nh·∫≠t
                QMessageBox.information(self, "Th√¥ng b√°o", "ƒê√£ ch·ªçn ·∫£nh ƒë·∫°i di·ªán m·ªõi. Nh·∫•n 'L∆∞u thay ƒë·ªïi' ƒë·ªÉ c·∫≠p nh·∫≠t.")

    def load_avatar(self, path):
        """T·∫£i ·∫£nh ƒë·∫°i di·ªán t·ª´ ƒë∆∞·ªùng d·∫´n"""
        if path and os.path.exists(path):
            pixmap = QPixmap(path)
            if not pixmap.isNull():
                pixmap = pixmap.scaled(80, 80, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                self.avatar_label.setPixmap(pixmap)
                self.avatar_label.setText("")  # X√≥a ch·ªØ c√°i ƒë·∫ßu
                return True
        return False

    def cancel_changes(self):
        """Cancel any changes and reload user data"""
        self.load_user_data()
        QMessageBox.information(self, 'Th√¥ng b√°o', 'ƒê√£ h·ªßy c√°c thay ƒë·ªïi.')
