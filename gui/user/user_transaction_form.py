from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, 
                            QComboBox, QLineEdit, QDateEdit, QMessageBox, QInputDialog,
                            QTextEdit, QFrame, QGridLayout, QSpacerItem, QSizePolicy)
from PyQt5.QtCore import QDate, Qt, pyqtSignal
from PyQt5.QtGui import QFont, QIcon
import datetime

class UserTransactionForm(QWidget):
    """
    Form th√™m/ch·ªânh s·ª≠a giao d·ªãch cho user v·ªõi giao di·ªán hi·ªán ƒë·∫°i
    """
    transaction_added = pyqtSignal()  # Signal khi th√™m giao d·ªãch th√†nh c√¥ng
    
    def __init__(self, user_manager, transaction_manager, category_manager, wallet_manager, parent=None):
        super().__init__(parent)
        self.user_manager = user_manager
        self.transaction_manager = transaction_manager
        self.category_manager = category_manager
        self.wallet_manager = wallet_manager
        self.current_transaction = None  # ƒê·ªÉ edit transaction
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()
        layout.setSpacing(20)
        layout.setContentsMargins(30, 30, 30, 30)
        
        # Header
        header_frame = QFrame()
        header_frame.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #667eea, stop:1 #764ba2);
                border-radius: 15px;
                padding: 20px;
                margin-bottom: 20px;
            }
        """)
        header_layout = QVBoxLayout()
        
        title = QLabel('üí∞ Th√™m giao d·ªãch m·ªõi')
        title.setStyleSheet("""
            QLabel {
                color: white;
                font-size: 24px;
                font-weight: bold;
                background: transparent;
            }
        """)
        
        subtitle = QLabel('Nh·∫≠p th√¥ng tin giao d·ªãch c·ªßa b·∫°n')
        subtitle.setStyleSheet("""
            QLabel {
                color: rgba(255, 255, 255, 0.8);
                font-size: 14px;
                background: transparent;
                margin-top: 5px;
            }
        """)
        
        header_layout.addWidget(title)
        header_layout.addWidget(subtitle)
        header_frame.setLayout(header_layout)
        layout.addWidget(header_frame)
        
        # Form content
        form_frame = QFrame()
        form_frame.setStyleSheet("""
            QFrame {
                background-color: white;
                border-radius: 15px;
                border: 1px solid #e2e8f0;
                padding: 25px;
            }
        """)
        
        form_layout = QGridLayout()
        form_layout.setSpacing(20)
        
        # Style cho labels v√† inputs
        label_style = """
            QLabel {
                color: #374151;
                font-weight: 600;
                font-size: 14px;
                margin-bottom: 5px;
            }
        """
        
        input_style = """
            QLineEdit, QComboBox, QDateEdit {
                padding: 12px 15px;
                border: 2px solid #e2e8f0;
                border-radius: 8px;
                font-size: 14px;
                background-color: #f8fafc;
            }
            QLineEdit:focus, QComboBox:focus, QDateEdit:focus {
                border-color: #667eea;
                background-color: white;
            }
        """
        
        # Row 0: Lo·∫°i giao d·ªãch v√† S·ªë ti·ªÅn
        type_label = QLabel('üìä Lo·∫°i giao d·ªãch')
        type_label.setStyleSheet(label_style)
        self.type_combo = QComboBox()
        self.type_combo.addItems(['üí∏ Chi ti√™u', 'üí∞ Thu nh·∫≠p'])
        self.type_combo.setStyleSheet(input_style)
        self.type_combo.currentTextChanged.connect(self.on_type_changed)
        
        amount_label = QLabel('üíµ S·ªë ti·ªÅn')
        amount_label.setStyleSheet(label_style)
        self.amount_input = QLineEdit()
        self.amount_input.setPlaceholderText('VD: 50000')
        self.amount_input.setStyleSheet(input_style)
        self.amount_input.textChanged.connect(self.format_amount)
        
        form_layout.addWidget(type_label, 0, 0)
        form_layout.addWidget(self.type_combo, 1, 0)
        form_layout.addWidget(amount_label, 0, 1)
        form_layout.addWidget(self.amount_input, 1, 1)
        
        # Row 2: Danh m·ª•c
        category_label = QLabel('üè∑Ô∏è Danh m·ª•c')
        category_label.setStyleSheet(label_style)
        
        category_layout = QHBoxLayout()
        self.category_combo = QComboBox()
        self.category_combo.setStyleSheet(input_style)
        self.reload_categories()
        
        btn_add_cat = QPushButton('+ Th√™m m·ªõi')
        btn_add_cat.setStyleSheet("""
            QPushButton {
                background: #10b981;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 12px 20px;
                font-weight: 600;
                font-size: 12px;
            }
            QPushButton:hover {
                background: #059669;
            }
        """)
        btn_add_cat.clicked.connect(self.add_category_dialog)
        
        category_layout.addWidget(self.category_combo, 3)
        category_layout.addWidget(btn_add_cat, 1)
        
        form_layout.addWidget(category_label, 2, 0, 1, 2)
        form_layout.addLayout(category_layout, 3, 0, 1, 2)
        
        # Row 4: Ng√†y
        date_label = QLabel('üìÖ Ng√†y giao d·ªãch')
        date_label.setStyleSheet(label_style)
        self.date_edit = QDateEdit(QDate.currentDate())
        self.date_edit.setCalendarPopup(True)
        self.date_edit.setStyleSheet(input_style)
        self.date_edit.setDisplayFormat('dd/MM/yyyy')
        
        form_layout.addWidget(date_label, 4, 0)
        form_layout.addWidget(self.date_edit, 5, 0)
        
        # Row 4 col 2: Wallet (n·∫øu c√≥)
        wallet_label = QLabel('üëõ V√≠/T√†i kho·∫£n')
        wallet_label.setStyleSheet(label_style)
        self.wallet_combo = QComboBox()
        self.wallet_combo.addItem('üí≥ V√≠ m·∫∑c ƒë·ªãnh', 'default')
        self.wallet_combo.setStyleSheet(input_style)
        
        form_layout.addWidget(wallet_label, 4, 1)
        form_layout.addWidget(self.wallet_combo, 5, 1)
        
        # Row 6: Ghi ch√∫ (full width)
        note_label = QLabel('üìù Ghi ch√∫')
        note_label.setStyleSheet(label_style)
        self.note_input = QTextEdit()
        self.note_input.setPlaceholderText('M√¥ t·∫£ chi ti·∫øt v·ªÅ giao d·ªãch (kh√¥ng b·∫Øt bu·ªôc)')
        self.note_input.setMaximumHeight(80)
        self.note_input.setStyleSheet("""
            QTextEdit {
                padding: 12px 15px;
                border: 2px solid #e2e8f0;
                border-radius: 8px;
                font-size: 14px;
                background-color: #f8fafc;
            }
            QTextEdit:focus {
                border-color: #667eea;
                background-color: white;
            }
        """)
        
        form_layout.addWidget(note_label, 6, 0, 1, 2)
        form_layout.addWidget(self.note_input, 7, 0, 1, 2)
        
        form_frame.setLayout(form_layout)
        layout.addWidget(form_frame)
        
        # Buttons
        button_layout = QHBoxLayout()
        
        btn_cancel = QPushButton('‚ùå H·ªßy')
        btn_cancel.setStyleSheet("""
            QPushButton {
                background: #6b7280;
                color: white;
                border: none;
                border-radius: 8px;
                padding: 15px 30px;
                font-weight: 600;
                font-size: 14px;
            }
            QPushButton:hover {
                background: #4b5563;
            }
        """)
        btn_cancel.clicked.connect(self.clear_form)
        
        btn_save = QPushButton('üíæ L∆∞u giao d·ªãch')
        btn_save.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #667eea, stop:1 #764ba2);
                color: white;
                border: none;
                border-radius: 8px;
                padding: 15px 30px;
                font-weight: 600;
                font-size: 14px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #5a67d8, stop:1 #6b46c1);
            }
        """)
        btn_save.clicked.connect(self.save_transaction)
        
        button_layout.addStretch()
        button_layout.addWidget(btn_cancel)
        button_layout.addWidget(btn_save)
        
        layout.addLayout(button_layout)
        layout.addStretch()
        
        self.setLayout(layout)
        
        # Set window background
        self.setStyleSheet("""
            QWidget {
                background-color: #f1f5f9;
            }
        """)    
    def on_type_changed(self, text):
        """C·∫≠p nh·∫≠t danh m·ª•c theo lo·∫°i giao d·ªãch"""
        self.reload_categories()
    
    def format_amount(self, text):
        """Format s·ªë ti·ªÅn khi nh·∫≠p"""
        # Lo·∫°i b·ªè t·∫•t c·∫£ k√Ω t·ª± kh√¥ng ph·∫£i s·ªë
        clean_text = ''.join(filter(str.isdigit, text))
        if clean_text:
            # Format v·ªõi d·∫•u ph·∫©y
            formatted = f"{int(clean_text):,}"
            # C·∫≠p nh·∫≠t text m√† kh√¥ng trigger signal
            self.amount_input.blockSignals(True)
            self.amount_input.setText(formatted)
            self.amount_input.blockSignals(False)
    
    def reload_categories(self):
        """T·∫£i l·∫°i danh m·ª•c theo lo·∫°i giao d·ªãch"""
        self.category_combo.clear()
        user_id = getattr(self.user_manager, 'current_user', {}).get('id', None)
        
        # X√°c ƒë·ªãnh lo·∫°i giao d·ªãch hi·ªán t·∫°i
        is_expense = self.type_combo.currentText().startswith('üí∏')
        tx_type = 'expense' if is_expense else 'income'
        
        # L·∫•y danh m·ª•c t·ª´ manager ho·∫∑c file JSON
        try:
            import json
            with open('data/categories.json', 'r', encoding='utf-8') as f:
                all_categories = json.load(f)
        except:
            all_categories = getattr(self.category_manager, 'categories', [])
        
        # L·ªçc danh m·ª•c theo user v√† lo·∫°i
        categories = []
        for cat in all_categories:
            # Danh m·ª•c c·ªßa user ho·∫∑c danh m·ª•c chung
            if cat.get('user_id') is None or cat.get('user_id') == user_id:
                # L·ªçc theo lo·∫°i n·∫øu c√≥
                cat_type = cat.get('type', 'both')
                if cat_type == 'both' or cat_type == tx_type:
                    categories.append(cat)
        
        # Th√™m icon cho t·ª´ng danh m·ª•c
        category_icons = {
            'food': 'üçΩÔ∏è', 'transport': 'üöó', 'shopping': 'üõí', 'health': 'üè•',
            'entertainment': 'üé¨', 'education': 'üìö', 'utilities': 'üí°', 'rent': 'üè†',
            'salary': 'üí∞', 'business': 'üíº', 'investment': 'üìà', 'gift': 'üéÅ',
            'other': 'üì¶'
        }
        
        for cat in categories:
            cat_name = cat.get('name', 'Kh√¥ng t√™n')
            cat_id = cat.get('id') or cat.get('category_id')
            icon = category_icons.get(cat.get('icon', 'other'), 'üì¶')
            
            display_name = f"{icon} {cat_name}"
            self.category_combo.addItem(display_name, cat_id)    
    def add_category_dialog(self):
        """Dialog th√™m danh m·ª•c m·ªõi v·ªõi giao di·ªán ƒë·∫πp"""
        dialog = QInputDialog(self)
        dialog.setWindowTitle('üè∑Ô∏è T·∫°o danh m·ª•c m·ªõi')
        dialog.setLabelText('Nh·∫≠p t√™n danh m·ª•c:')
        dialog.setTextValue('')
        dialog.resize(400, 150)
        
        # Style cho dialog
        dialog.setStyleSheet("""
            QInputDialog {
                background-color: white;
            }
            QLabel {
                font-size: 14px;
                color: #374151;
                font-weight: 600;
            }
            QLineEdit {
                padding: 10px;
                border: 2px solid #e2e8f0;
                border-radius: 6px;
                font-size: 14px;
            }
            QLineEdit:focus {
                border-color: #667eea;
            }
            QPushButton {
                padding: 8px 20px;
                border-radius: 6px;
                font-weight: 600;
            }
        """)
        
        if dialog.exec_() == QInputDialog.Accepted:
            name = dialog.textValue().strip()
            if not name:
                return
                
            user_id = getattr(self.user_manager, 'current_user', {}).get('id', None)
            
            # Ki·ªÉm tra tr√πng t√™n
            try:
                import json
                with open('data/categories.json', 'r', encoding='utf-8') as f:
                    all_categories = json.load(f)
            except:
                all_categories = getattr(self.category_manager, 'categories', [])
            
            for c in all_categories:
                if (c.get('name', '').lower() == name.lower() and 
                    (c.get('user_id') is None or c.get('user_id') == user_id)):
                    QMessageBox.warning(self, '‚ö†Ô∏è L·ªói', 
                                      f'Danh m·ª•c "{name}" ƒë√£ t·ªìn t·∫°i!')
                    return
            
            # T·∫°o danh m·ª•c m·ªõi
            is_expense = self.type_combo.currentText().startswith('üí∏')
            cat_type = 'expense' if is_expense else 'income'
            
            new_cat = {
                'id': f'usercat_{user_id}_{len(all_categories)+1}',
                'name': name,
                'user_id': user_id,
                'type': cat_type,
                'icon': 'other',
                'created_at': datetime.datetime.now().isoformat()
            }
            
            # Th√™m v√†o danh s√°ch
            all_categories.append(new_cat)
            
            # L∆∞u v√†o file
            try:
                with open('data/categories.json', 'w', encoding='utf-8') as f:
                    json.dump(all_categories, f, ensure_ascii=False, indent=2)
                
                # C·∫≠p nh·∫≠t manager n·∫øu c√≥
                if hasattr(self.category_manager, 'categories'):
                    self.category_manager.categories = all_categories
                if hasattr(self.category_manager, 'save'):
                    self.category_manager.save()
                    
                self.reload_categories()
                
                # T·ª± ƒë·ªông ch·ªçn danh m·ª•c v·ª´a t·∫°o
                for i in range(self.category_combo.count()):
                    if self.category_combo.itemData(i) == new_cat['id']:
                        self.category_combo.setCurrentIndex(i)
                        break
                
                QMessageBox.information(self, '‚úÖ Th√†nh c√¥ng', 
                                      f'ƒê√£ t·∫°o danh m·ª•c "{name}" th√†nh c√¥ng!')
                                      
            except Exception as e:
                QMessageBox.critical(self, '‚ùå L·ªói', 
                                   f'Kh√¥ng th·ªÉ l∆∞u danh m·ª•c: {str(e)}')

    def clear_form(self):
        """X√≥a form v√† reset v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu"""
        self.amount_input.clear()
        self.note_input.clear()
        self.date_edit.setDate(QDate.currentDate())
        self.type_combo.setCurrentIndex(0)
        self.wallet_combo.setCurrentIndex(0)
        self.reload_categories()
        
    def validate_form(self):
        """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa form"""
        errors = []
        
        # Ki·ªÉm tra s·ªë ti·ªÅn
        amount_text = self.amount_input.text().replace(',', '').strip()
        if not amount_text:
            errors.append('Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn')
        else:
            try:
                amount = float(amount_text)
                if amount <= 0:
                    errors.append('S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0')
                elif amount > 999999999:
                    errors.append('S·ªë ti·ªÅn qu√° l·ªõn')
            except ValueError:
                errors.append('S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá')
        
        # Ki·ªÉm tra danh m·ª•c
        if self.category_combo.count() == 0:
            errors.append('Vui l√≤ng ch·ªçn danh m·ª•c')
        elif not self.category_combo.currentData():
            errors.append('Danh m·ª•c kh√¥ng h·ª£p l·ªá')
        
        # Ki·ªÉm tra ng√†y
        selected_date = self.date_edit.date().toPyDate()
        today = datetime.date.today()
        if selected_date > today:
            errors.append('Ng√†y kh√¥ng th·ªÉ ·ªü t∆∞∆°ng lai')
        
        return errors    
    def save_transaction(self):
        """L∆∞u giao d·ªãch v·ªõi validation ƒë·∫ßy ƒë·ªß"""
        # Validate form
        errors = self.validate_form()
        if errors:
            error_msg = "Vui l√≤ng s·ª≠a c√°c l·ªói sau:\n\n" + "\n".join(f"‚Ä¢ {error}" for error in errors)
            QMessageBox.warning(self, '‚ö†Ô∏è L·ªói nh·∫≠p li·ªáu', error_msg)
            return
        
        try:
            # L·∫•y d·ªØ li·ªáu t·ª´ form
            amount_text = self.amount_input.text().replace(',', '').strip()
            amount = float(amount_text)
            
            is_expense = self.type_combo.currentText().startswith('üí∏')
            tx_type = 'expense' if is_expense else 'income'
            
            cat_id = self.category_combo.currentData()
            date = self.date_edit.date().toString('yyyy-MM-dd')
            note = self.note_input.toPlainText().strip()
            user_id = getattr(self.user_manager, 'current_user', {}).get('id', None)
            wallet_id = self.wallet_combo.currentData()
            
            # T·∫°o giao d·ªãch m·ªõi
            import json
            
            # ƒê·ªçc d·ªØ li·ªáu hi·ªán t·∫°i
            try:
                with open('data/transactions.json', 'r', encoding='utf-8') as f:
                    all_transactions = json.load(f)
            except:
                all_transactions = []
            
            # T·∫°o ID m·ªõi
            max_id = 0
            for tx in all_transactions:
                try:
                    tx_id = tx.get('id', '')
                    if tx_id.startswith('tx_'):
                        num = int(tx_id.split('_')[-1])
                        max_id = max(max_id, num)
                except:
                    continue
            
            new_tx = {
                'id': f'tx_{user_id}_{max_id + 1}',
                'user_id': user_id,
                'type': tx_type,
                'amount': amount,
                'category_id': cat_id,
                'date': date + 'T00:00:00Z',
                'note': note,
                'wallet_id': wallet_id,
                'created_at': datetime.datetime.now().isoformat(),
                'updated_at': datetime.datetime.now().isoformat()
            }
            
            # Th√™m v√†o danh s√°ch
            all_transactions.append(new_tx)
            
            # L∆∞u v√†o file
            with open('data/transactions.json', 'w', encoding='utf-8') as f:
                json.dump(all_transactions, f, ensure_ascii=False, indent=2)
            
            # C·∫≠p nh·∫≠t manager n·∫øu c√≥
            if hasattr(self.transaction_manager, 'transactions'):
                self.transaction_manager.transactions = all_transactions
            if hasattr(self.transaction_manager, 'save'):
                self.transaction_manager.save()
            
            # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            tx_type_text = "chi ti√™u" if is_expense else "thu nh·∫≠p"
            success_msg = (f"‚úÖ ƒê√£ th√™m giao d·ªãch {tx_type_text} th√†nh c√¥ng!\n\n"
                          f"üí∞ S·ªë ti·ªÅn: {amount:,.0f} ƒë\n"
                          f"üìÖ Ng√†y: {self.date_edit.date().toString('dd/MM/yyyy')}\n"
                          f"üè∑Ô∏è Danh m·ª•c: {self.category_combo.currentText()}")
            
            QMessageBox.information(self, 'üéâ Th√†nh c√¥ng', success_msg)
            
            # Emit signal ƒë·ªÉ c·∫≠p nh·∫≠t UI kh√°c
            self.transaction_added.emit()
            
            # Clear form
            self.clear_form()
            
        except Exception as e:
            QMessageBox.critical(self, '‚ùå L·ªói', 
                               f'Kh√¥ng th·ªÉ l∆∞u giao d·ªãch:\n{str(e)}')
    
    def set_transaction_for_edit(self, transaction):
        """Thi·∫øt l·∫≠p form ƒë·ªÉ ch·ªânh s·ª≠a giao d·ªãch"""
        self.current_transaction = transaction
        
        # C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ
        header_title = self.findChild(QLabel)
        if header_title:
            header_title.setText('‚úèÔ∏è Ch·ªânh s·ª≠a giao d·ªãch')
        
        # ƒêi·ªÅn d·ªØ li·ªáu v√†o form
        self.amount_input.setText(f"{transaction.get('amount', 0):,.0f}")
        
        # Ch·ªçn lo·∫°i giao d·ªãch
        if transaction.get('type') == 'expense':
            self.type_combo.setCurrentText('üí∏ Chi ti√™u')
        else:
            self.type_combo.setCurrentText('üí∞ Thu nh·∫≠p')
        
        # Ch·ªçn danh m·ª•c
        cat_id = transaction.get('category_id')
        for i in range(self.category_combo.count()):
            if self.category_combo.itemData(i) == cat_id:
                self.category_combo.setCurrentIndex(i)
                break
        
        # ƒê·∫∑t ng√†y
        try:
            date_str = transaction.get('date', '')
            if 'T' in date_str:
                date_str = date_str.split('T')[0]
            date_obj = datetime.datetime.strptime(date_str, '%Y-%m-%d').date()
            self.date_edit.setDate(QDate(date_obj))
        except:
            pass
        
        # Ghi ch√∫
        self.note_input.setPlainText(transaction.get('note', ''))
        
        # C·∫≠p nh·∫≠t n√∫t l∆∞u
        save_button = self.findChildren(QPushButton)[-1]  # N√∫t cu·ªëi c√πng
        save_button.setText('üíæ C·∫≠p nh·∫≠t giao d·ªãch')
