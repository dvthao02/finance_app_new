from PyQt5.QtWidgets import QWidget, QHBoxLayout, QVBoxLayout, QLabel, QPushButton, QFrame, QComboBox, QSizePolicy, QTableWidget, QTableWidgetItem, QHeaderView, QLineEdit, QStackedWidget
from PyQt5.QtGui import QFont, QIcon, QPixmap, QColor, QPalette
from PyQt5.QtCore import Qt, QSize, pyqtSignal, QTimer
import matplotlib
matplotlib.use('Agg')
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
import datetime

class UserDashboard(QWidget):
    logout_signal = pyqtSignal()
    
    def __init__(self, user_manager, transaction_manager, category_manager, wallet_manager, parent=None):
        super().__init__(parent)
        self.user_manager = user_manager
        self.transaction_manager = transaction_manager
        self.category_manager = category_manager
        self.wallet_manager = wallet_manager
        self.current_user = None
        self.init_ui()    
    def set_current_user(self, user):
        self.current_user = user
        self.user_manager.current_user = user
        self.update_dashboard()
          # Show welcome toast after a short delay
        QTimer.singleShot(1000, self.show_welcome_toast)

    def init_ui(self):
        self.setWindowTitle('Qu·∫£n l√Ω Chi Ti√™u C√° Nh√¢n')
        self.setMinimumSize(1350, 850)
          # Set comprehensive default styling for better harmony
        self.setStyleSheet("""
            /* Global default styles */
            QWidget { 
                background-color: #f8fafc; 
                font-family: 'Segoe UI', sans-serif;
                font-size: 13px;
                color: #1e293b;
            }
            
            /* Label styles */
            QLabel {
                color: #334155;
                font-size: 13px;
            }
            
            /* Button styles */
            QPushButton {
                font-size: 13px;
                font-weight: 500;
                padding: 8px 16px;
                border-radius: 6px;
                border: 1px solid #e2e8f0;
                background: white;
                color: #374151;
                min-height: 20px;
            }
            QPushButton:hover {
                background: #f9fafb;
                border-color: #d1d5db;
            }
            QPushButton:pressed {
                background: #f3f4f6;
            }
            
            /* Input styles */
            QLineEdit, QComboBox {
                font-size: 13px;
                padding: 8px 12px;
                border: 1px solid #d1d5db;
                border-radius: 6px;
                background: white;
                color: #374151;
                min-height: 16px;
            }
            QLineEdit:focus, QComboBox:focus {
                border-color: #3b82f6;
            }
            
            /* Table styles */
            QTableWidget {
                font-size: 13px;
                gridline-color: #f1f5f9;
                background: white;
                selection-background-color: #eff6ff;
                border: 1px solid #e2e8f0;
                border-radius: 8px;
            }
            QTableWidget::item {
                padding: 10px 12px;
                border-bottom: 1px solid #f1f5f9;
            }
            QHeaderView::section {
                background: #f8fafc;
                padding: 12px;
                border: none;
                border-bottom: 1px solid #e2e8f0;
                font-weight: 600;
                font-size: 12px;
                color: #6b7280;
            }
            
            /* Frame styles */
            QFrame {
                border-radius: 8px;
            }
        """)

        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)

        # Header
        header = self.create_header()
        main_layout.addWidget(header)        # Body v·ªõi sidebar v√† content
        body_layout = QHBoxLayout()
        body_layout.setContentsMargins(0, 0, 0, 0)
        body_layout.setSpacing(0)

        # Sidebar
        sidebar = self.create_sidebar()
        body_layout.addWidget(sidebar)

        # Main content area
        self.content_stack = QStackedWidget()
        self.content_stack.setMinimumWidth(800)  # ƒê·∫£m b·∫£o content c√≥ width t·ªëi thi·ªÉu
        self.content_stack.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        
        # Dashboard tab
        dashboard_widget = self.create_dashboard_content()
        self.content_stack.addWidget(dashboard_widget)
        
        # Import other tabs
        from .user_transaction_form import UserTransactionForm
        from .user_transaction_history import UserTransactionHistory
        from .user_report import UserReport
        from .user_budget import UserBudget
        from .user_category_tab import UserCategoryTab
        from .user_settings import UserSettings
          # Initialize other tabs
        self.transaction_form = UserTransactionForm(self.user_manager, self.transaction_manager, self.category_manager, self.wallet_manager)
        self.transaction_history = UserTransactionHistory(self.user_manager, self.transaction_manager, self.category_manager, self.wallet_manager)
        self.report_tab = UserReport(self.user_manager, self.transaction_manager, self.category_manager)
         
        user_id = getattr(self.user_manager, 'current_user', {}).get('id', None)
        self.budget_tab = UserBudget(self.user_manager, self.transaction_manager, self.category_manager, self.wallet_manager)
        self.category_tab = UserCategoryTab(self.category_manager, user_id, reload_callback=self.reload_categories)
        self.settings_tab = UserSettings(self.user_manager, self.wallet_manager, self.category_manager)
        
        # Connect signals between tabs
        self.connect_tab_signals()
          # Add tabs to stack
        self.content_stack.addWidget(self.transaction_form)      # index 1
        self.content_stack.addWidget(self.transaction_history)   # index 2
        self.content_stack.addWidget(self.report_tab)           # index 3
        self.content_stack.addWidget(self.budget_tab)           # index 4
        self.content_stack.addWidget(self.category_tab)         # index 5
        self.content_stack.addWidget(self.settings_tab)         # index 6

        # Add content stack to body layout
        body_layout.addWidget(self.content_stack)
        main_layout.addLayout(body_layout)
        
        # Add quick actions floating button
        self.setup_quick_actions()

    def create_header(self):
        header = QFrame()
        header.setFixedHeight(70)
        header.setStyleSheet("""
            QFrame {
                background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
                border: none;
                border-radius: 0px;
            }
        """)
        
        layout = QHBoxLayout(header)
        layout.setContentsMargins(24, 0, 24, 0)
        layout.setSpacing(20)
        
        # Logo v√† t√™n app
        logo_layout = QHBoxLayout()
        logo_layout.setSpacing(12)
        
        logo = QLabel()
        try:
            logo.setPixmap(QPixmap('assets/app_icon.png').scaled(36, 36, Qt.KeepAspectRatio, Qt.SmoothTransformation))
        except:
            logo.setText('üíº')
            logo.setFont(QFont('Segoe UI', 20))
        logo_layout.addWidget(logo)
        
        app_name = QLabel('FinanceTracker')
        app_name.setFont(QFont('Segoe UI', 18, QFont.Bold))
        app_name.setStyleSheet('color: white; font-weight: 600;')
        logo_layout.addWidget(app_name)
        
        layout.addLayout(logo_layout)
        layout.addStretch()
        
        # Search box
        search = QLineEdit()
        search.setPlaceholderText('T√¨m ki·∫øm giao d·ªãch, danh m·ª•c...')
        search.setFixedWidth(280)
        search.setFixedHeight(38)
        search.setStyleSheet("""
            QLineEdit {
                background: rgba(255,255,255,0.95);
                border: 1px solid rgba(255,255,255,0.2);
                border-radius: 19px;
                padding: 0 16px;
                font-size: 14px;
                color: #374151;
            }
            QLineEdit:focus {
                background: white;
                border-color: rgba(255,255,255,0.4);
            }
            QLineEdit::placeholder {
                color: #9ca3af;
            }
        """)        
        layout.addWidget(search)
        
        layout.addStretch()
        
        # Notification bell
        self.notification_btn = QPushButton('üîî')
        self.notification_btn.setFont(QFont('Segoe UI', 16))
        self.notification_btn.setFixedSize(44, 44)
        self.notification_btn.setStyleSheet("""
            QPushButton {
                color: white;
                background: rgba(255,255,255,0.15);
                border: 1px solid rgba(255,255,255,0.2);
                border-radius: 22px;
                font-size: 16px;
            }
            QPushButton:hover {
                background: rgba(255,255,255,0.25);
                border-color: rgba(255,255,255,0.3);
            }
            QPushButton:pressed {
                background: rgba(255,255,255,0.1);
            }
        """)
        self.notification_btn.clicked.connect(self.show_notifications)
        layout.addWidget(self.notification_btn)
        
        # User info (clickable)
        user_name = getattr(self.user_manager, 'current_user', {}).get('name', 'User')
        self.user_button = QPushButton(f'üë§  {user_name}')
        self.user_button.setFont(QFont('Segoe UI', 13, QFont.Medium))
        self.user_button.setStyleSheet("""
            QPushButton {
                color: white;
                background: rgba(255,255,255,0.15);
                border: 1px solid rgba(255,255,255,0.2);
                border-radius: 22px;
                padding: 8px 18px;
                text-align: left;
                font-weight: 500;
                min-width: 120px;
            }
            QPushButton:hover {
                background: rgba(255,255,255,0.25);
                border-color: rgba(255,255,255,0.3);
            }
            QPushButton:pressed {
                background: rgba(255,255,255,0.1);
            }
        """)
        self.user_button.clicked.connect(self.show_user_profile)
        layout.addWidget(self.user_button)
        
        return header

    def create_sidebar(self):
        sidebar = QFrame()
        sidebar.setFixedWidth(250)
        sidebar.setStyleSheet("""
            QFrame {
                background: white;
                border-right: 1px solid #e2e8f0;
                border-radius: 0px;
            }
        """)
        
        layout = QVBoxLayout(sidebar)
        layout.setContentsMargins(0, 24, 0, 24)
        layout.setSpacing(4)
        
        # Menu items
        self.menu_buttons = []
        menu_items = [
            ('üìä  T·ªïng quan', 0),
            ('üí∞  Nh·∫≠p giao d·ªãch', 1),
            ('üìã  Danh s√°ch giao d·ªãch', 2),
            ('üìà  B√°o c√°o th·ªëng k√™', 3),
            ('üéØ  Ng√¢n s√°ch', 4),
            ('üìÇ  Danh m·ª•c', 5),
            ('‚öôÔ∏è  C√†i ƒë·∫∑t', 6),
        ]
        
        for i, (text, tab_index) in enumerate(menu_items):
            btn = QPushButton(text)
            btn.setFont(QFont('Segoe UI', 13, QFont.Medium))
            btn.setFixedHeight(48)
            btn.setCursor(Qt.PointingHandCursor)
            
            if i == 0:  # Dashboard active by default
                btn.setStyleSheet("""
                    QPushButton {
                        text-align: left;
                        padding-left: 20px;
                        border: none;
                        border-radius: 8px;
                        background: #f0f9ff;
                        color: #0369a1;
                        margin: 2px 12px;
                        font-weight: 600;
                        border-left: 3px solid #3b82f6;
                    }
                """)
            else:
                btn.setStyleSheet("""
                    QPushButton {
                        text-align: left;
                        padding-left: 20px;
                        border: none;
                        border-radius: 8px;
                        background: transparent;
                        color: #64748b;
                        margin: 2px 12px;
                        font-weight: 500;
                    }
                    QPushButton:hover {
                        background: #f8fafc;
                        color: #1e293b;
                        border-left: 3px solid #e2e8f0;
                    }
                """)
            
            btn.clicked.connect(lambda checked, idx=tab_index: self.switch_tab(idx))
            layout.addWidget(btn)
            self.menu_buttons.append(btn)
        
        layout.addStretch()
        return sidebar

    def create_dashboard_content(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(30, 30, 30, 30)
        layout.setSpacing(25)
        
        # Page header
        header_layout = QHBoxLayout()
        title = QLabel('T·ªïng quan t√†i ch√≠nh')
        title.setFont(QFont('Segoe UI', 24, QFont.Bold))
        title.setStyleSheet('color: #1e293b;')
        header_layout.addWidget(title)
        
        header_layout.addStretch()
        
        time_filter = QComboBox()
        time_filter.addItems(['Th√°ng 6, 2025'])
        time_filter.setFixedHeight(35)
        time_filter.setStyleSheet("""
            QComboBox {
                background: white;
                border: 1px solid #e2e8f0;
                border-radius: 8px;
                padding: 0 10px;
                min-width: 120px;
            }
        """)
        header_layout.addWidget(time_filter)
        
        layout.addLayout(header_layout)
        
        # Stats cards
        stats_layout = QHBoxLayout()
        stats_layout.setSpacing(20)
          # L·∫•y d·ªØ li·ªáu th·ªëng k√™ th·ª±c
        now = datetime.datetime.now()
        month = now.month
        year = now.year
        user_id = getattr(self.user_manager, 'current_user', {}).get('id', None)
        
        # Kh·ªüi t·∫°o v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
        income = 0
        expense = 0
        balance = 0
        savings = 0
        income_change = 0
        expense_change = 0
        year_income = 0
        year_expense = 0
        
        if user_id:
            # L·∫•y d·ªØ li·ªáu th·ª±c t·ª´ file JSON
            try:
                import json
                with open('data/transactions.json', 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    user_transactions = [t for t in data if t.get('user_id') == user_id]
                    
                # T√≠nh to√°n cho th√°ng hi·ªán t·∫°i
                current_month_income = 0
                current_month_expense = 0
                previous_month_income = 0
                previous_month_expense = 0
                
                for t in user_transactions:
                    try:
                        tx_date = datetime.datetime.fromisoformat(t['date'].replace('Z', '+00:00'))
                        amount = t.get('amount', 0)
                        tx_type = t.get('type')
                        
                        # Th·ªëng k√™ theo nƒÉm
                        if tx_date.year == year:
                            if tx_type == 'income':
                                year_income += amount
                            elif tx_type == 'expense':
                                year_expense += amount
                                
                            # Th·ªëng k√™ theo th√°ng
                            if tx_date.month == month:
                                if tx_type == 'income':
                                    current_month_income += amount
                                elif tx_type == 'expense':
                                    current_month_expense += amount
                            elif tx_date.month == (month - 1 if month > 1 else 12):
                                if tx_type == 'income':
                                    previous_month_income += amount
                                elif tx_type == 'expense':
                                    previous_month_expense += amount
                    except Exception:
                        continue
                
                income = current_month_income
                expense = current_month_expense
                balance = income - expense
                savings = year_income - year_expense
                
                # T√≠nh ph·∫ßn trƒÉm thay ƒë·ªïi
                if previous_month_income > 0:
                    income_change = ((income - previous_month_income) / previous_month_income) * 100
                if previous_month_expense > 0:
                    expense_change = ((expense - previous_month_expense) / previous_month_expense) * 100
                    
            except Exception as e:
                print(f"L·ªói ƒë·ªçc d·ªØ li·ªáu th·ªëng k√™: {e}")
                # ƒê·∫£m b·∫£o c√°c bi·∫øn ƒë∆∞·ª£c kh·ªüi t·∫°o ngay c·∫£ khi c√≥ l·ªói
                year_income = 0
                year_expense = 0        # T·∫°o c√°c card v·ªõi d·ªØ li·ªáu th·ª±c
        try:
            from .animated_widgets import AnimatedStatCard, StaggeredAnimationGroup
            
            card1 = AnimatedStatCard('T·ªïng thu', income, 
                                    f'{income_change:+.1f}% so v·ªõi th√°ng tr∆∞·ªõc', 
                                    '#10b981', '‚Üó' if income_change >= 0 else '‚Üò')
            card2 = AnimatedStatCard('T·ªïng chi', expense, 
                                    f'{expense_change:+.1f}% so v·ªõi th√°ng tr∆∞·ªõc', 
                                    '#ef4444', '‚Üó' if expense_change >= 0 else '‚Üò')
            card3 = AnimatedStatCard('S·ªë d∆∞', balance, 
                                    f'{((balance/income)*100 if income > 0 else 0):.1f}% c·ªßa thu nh·∫≠p', 
                                    '#3b82f6', '‚Üó')
            card4 = AnimatedStatCard('Ti·∫øt ki·ªám', savings, 
                                    f'{((savings/year_income)*100 if year_income > 0 else 0):.1f}% t√≠ch lu·ªπ nƒÉm', 
                                    '#8b5cf6', '‚Üó')
            
            # Store cards for later animation
            self.stat_cards = [card1, card2, card3, card4]
        except Exception as e:
            print(f"Error creating animated cards: {e}")
            # Fallback to regular stat cards
            card1 = self.create_stat_card('T·ªïng thu', f'{income:,.0f} ƒë', 
                                        f'{income_change:+.1f}% so v·ªõi th√°ng tr∆∞·ªõc', 
                                        '#10b981', '‚Üó' if income_change >= 0 else '‚Üò')
            card2 = self.create_stat_card('T·ªïng chi', f'{expense:,.0f} ƒë', 
                                        f'{expense_change:+.1f}% so v·ªõi th√°ng tr∆∞·ªõc', 
                                        '#ef4444', '‚Üó' if expense_change >= 0 else '‚Üò')
            card3 = self.create_stat_card('S·ªë d∆∞', f'{balance:,.0f} ƒë', 
                                        f'{((balance/income)*100 if income > 0 else 0):.1f}% c·ªßa thu nh·∫≠p', 
                                        '#3b82f6', '‚Üó')
            card4 = self.create_stat_card('Ti·∫øt ki·ªám', f'{savings:,.0f} ƒë', 
                                        f'{((savings/year_income)*100 if year_income > 0 else 0):.1f}% t√≠ch lu·ªπ nƒÉm', 
                                        '#8b5cf6', '‚Üó')
            
            # Store cards for later updates
            self.stat_cards = [card1, card2, card3, card4]
        
        stats_layout.addWidget(card1)
        stats_layout.addWidget(card2)
        stats_layout.addWidget(card3)
        stats_layout.addWidget(card4)
        
        layout.addLayout(stats_layout)
        
        # Charts row
        charts_layout = QHBoxLayout()
        charts_layout.setSpacing(25)
        
        # Line chart
        line_chart_widget = self.create_line_chart()
        charts_layout.addWidget(line_chart_widget, 2)
        
        # Pie chart
        pie_chart_widget = self.create_pie_chart()
        charts_layout.addWidget(pie_chart_widget, 1)
        
        layout.addLayout(charts_layout)
        
        # Transactions table
        table_widget = self.create_transactions_table()
        layout.addWidget(table_widget)
        
        return widget
    
    def create_stat_card(self, title, value, subtitle, color, trend_icon):
        card = QFrame()
        card.setStyleSheet("""
            QFrame {
                background: white;
                border-radius: 12px;
                border: 1px solid #e2e8f0;
            }
            QFrame:hover {
                border-color: #cbd5e1;
                background: #fafafa;
            }
        """)
        card.setFixedHeight(130)
        card.setMinimumWidth(250)
        
        layout = QVBoxLayout(card)
        layout.setContentsMargins(24, 20, 24, 20)
        layout.setSpacing(12)
        
        # Header v·ªõi title v√† trend
        header_layout = QHBoxLayout()
        title_label = QLabel(title)
        title_label.setFont(QFont('Segoe UI', 13, QFont.Medium))
        title_label.setStyleSheet('color: #6b7280; font-weight: 500; letter-spacing: 0.3px;')
        header_layout.addWidget(title_label)
        
        header_layout.addStretch()
        
        trend_label = QLabel(trend_icon)
        trend_label.setFont(QFont('Segoe UI', 16))
        trend_label.setStyleSheet(f'color: {color}; font-weight: 600;')
        header_layout.addWidget(trend_label)
        
        layout.addLayout(header_layout)
        
        # Value
        value_label = QLabel(value)
        value_label.setFont(QFont('Segoe UI', 22, QFont.Bold))
        value_label.setStyleSheet(f'color: {color}; font-weight: 700; line-height: 1.2;')
        layout.addWidget(value_label)
        
        # Subtitle
        subtitle_label = QLabel(subtitle)
        subtitle_label.setFont(QFont('Segoe UI', 11))
        subtitle_label.setStyleSheet('color: #9ca3af; font-weight: 400; line-height: 1.4;')
        layout.addWidget(subtitle_label)
        
        return card

    def create_line_chart(self):
        widget = QFrame()        
        widget.setStyleSheet("""
            QFrame {
                background: white;
                border-radius: 12px;
                border: 1px solid #e2e8f0;
            }
        """)
        
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(24, 24, 24, 24)
        layout.setSpacing(20)
        
        # Header
        header_layout = QHBoxLayout()
        title = QLabel('Bi·ªÉu ƒë·ªì thu chi')
        title.setFont(QFont('Segoe UI', 17, QFont.Bold))
        title.setStyleSheet('color: #1e293b; font-weight: 600; letter-spacing: -0.3px;')
        header_layout.addWidget(title)
        
        header_layout.addStretch()
        
        # Filter buttons
        filter_layout = QHBoxLayout()
        filter_layout.setSpacing(8)
        
        for period in ['Tu·∫ßn', 'Th√°ng', 'NƒÉm']:
            btn = QPushButton(period)
            btn.setFixedSize(65, 32)
            btn.setFont(QFont('Segoe UI', 12, QFont.Medium))
            if period == 'Th√°ng':
                btn.setStyleSheet("""
                    QPushButton {
                        background: #3b82f6;
                        color: white;
                        border: none;
                        border-radius: 8px;
                        font-weight: 600;
                    }
                    QPushButton:hover {
                        background: #2563eb;
                    }
                """)
            else:
                btn.setStyleSheet("""
                    QPushButton {
                        background: #f8fafc;
                        color: #64748b;
                        border: 1px solid #e2e8f0;
                        border-radius: 8px;
                        font-weight: 500;
                    }
                    QPushButton:hover {
                        background: #f1f5f9;
                        color: #1e293b;
                        border-color: #cbd5e1;
                    }
                """)
            filter_layout.addWidget(btn)
        
        header_layout.addLayout(filter_layout)
        layout.addLayout(header_layout)
        
        # Chart with better spacing
        self.line_chart_canvas = FigureCanvas(Figure(figsize=(8, 4)))
        self.line_chart_canvas.setStyleSheet('background: transparent;')
        layout.addWidget(self.line_chart_canvas)
        
        return widget
    
    def create_pie_chart(self):
        widget = QFrame()        
        widget.setStyleSheet("""
            QFrame {
                background: white;
                border-radius: 12px;
                border: 1px solid #e2e8f0;
            }
        """)
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(24, 24, 24, 24)
        layout.setSpacing(20)
        
        # Header
        header_layout = QHBoxLayout()
        title = QLabel('Ph√¢n b·ªï chi ti√™u')
        title.setFont(QFont('Segoe UI', 17, QFont.Bold))
        title.setStyleSheet('color: #1e293b; font-weight: 600; letter-spacing: -0.3px;')
        header_layout.addWidget(title)
        
        header_layout.addStretch()
        
        view_all = QLabel('Xem chi ti·∫øt ‚Üí')
        view_all.setFont(QFont('Segoe UI', 12, QFont.Medium))
        view_all.setStyleSheet('color: #3b82f6; font-weight: 500;')
        view_all.setCursor(Qt.PointingHandCursor)
        header_layout.addWidget(view_all)
        
        layout.addLayout(header_layout)
        
        # Chart with better styling
        self.pie_chart_canvas = FigureCanvas(Figure(figsize=(4, 4)))
        self.pie_chart_canvas.setStyleSheet('background: transparent;')
        layout.addWidget(self.pie_chart_canvas)
        
        return widget
    
    def create_transactions_table(self):
        widget = QFrame()
        widget.setStyleSheet("""
            QFrame {
                background: white;
                border-radius: 12px;
                border: 1px solid #e2e8f0;
            }
        """)
        
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(24, 24, 24, 24)
        layout.setSpacing(20)
        
        # Header
        header_layout = QHBoxLayout()
        title = QLabel('Giao d·ªãch g·∫ßn ƒë√¢y')
        title.setFont(QFont('Segoe UI', 17, QFont.Bold))
        title.setStyleSheet('color: #1e293b; font-weight: 600; letter-spacing: -0.3px;')        
        header_layout.addWidget(title)
        
        header_layout.addStretch()
        
        # Search and filter with better styling
        search_box = QLineEdit()
        search_box.setPlaceholderText('T√¨m ki·∫øm giao d·ªãch')
        search_box.setFixedWidth(220)
        search_box.setFixedHeight(38)
        search_box.setStyleSheet("""
            QLineEdit {
                background: #f8fafc;
                border: 1px solid #e2e8f0;
                border-radius: 8px;
                padding: 0 12px;
                font-size: 13px;
                color: #374151;
            }
            QLineEdit:focus {
                border-color: #3b82f6;
                background: white;
            }
            QLineEdit::placeholder {
                color: #9ca3af;
            }
        """)
        header_layout.addWidget(search_box)
        
        filter_btn = QPushButton('üîç L·ªçc')
        filter_btn.setFixedSize(70, 38)
        filter_btn.setFont(QFont('Segoe UI', 12, QFont.Medium))
        filter_btn.setStyleSheet("""
            QPushButton {
                background: #f8fafc;
                border: 1px solid #e2e8f0;
                border-radius: 8px;
                color: #64748b;
                font-weight: 500;
            }
            QPushButton:hover {
                background: #f1f5f9;
                color: #1e293b;
                border-color: #cbd5e1;
            }
        """)
        header_layout.addWidget(filter_btn)
        
        layout.addLayout(header_layout)
          # Table with improved styling
        self.transactions_table = QTableWidget()
        self.transactions_table.setColumnCount(6)
        self.transactions_table.setHorizontalHeaderLabels(['Ng√†y th√°ng', 'Lo·∫°i', 'Danh m·ª•c', 'S·ªë ti·ªÅn', 'Ghi ch√∫', 'Thao t√°c'])
        
        # Enhanced table styling
        self.transactions_table.setStyleSheet("""
            QTableWidget {
                border: none;
                gridline-color: #f1f5f9;
                background: white;
                selection-background-color: #f0f9ff;
                selection-color: #1e40af;
                font-size: 13px;
            }
            QTableWidget::item {
                padding: 14px 12px;
                border-bottom: 1px solid #f1f5f9;
                color: #374151;
            }
            QTableWidget::item:selected {
                background: #f0f9ff;
                color: #1e40af;
            }
            QTableWidget::item:hover {
                background: #f8fafc;
            }
            QHeaderView::section {
                background: #f8fafc;
                padding: 16px 12px;
                border: none;
                border-bottom: 2px solid #e2e8f0;                font-weight: 600;
                font-size: 12px;
                color: #6b7280;
                letter-spacing: 0.5px;
            }
        """)
        
        # Better table configuration
        self.transactions_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.transactions_table.setAlternatingRowColors(True)
        self.transactions_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.transactions_table.setShowGrid(False)
        self.transactions_table.verticalHeader().setVisible(False)
        
        layout.addWidget(self.transactions_table)
        
        return widget

    def update_dashboard(self):
        self.update_line_chart()
        self.update_pie_chart()
        self.update_transactions_table()
        # C·∫≠p nh·∫≠t stat cards v·ªõi d·ªØ li·ªáu th·ª±c
        self.update_stat_cards()
        
        # Trigger staggered animation for stat cards after a short delay
        if hasattr(self, 'stat_cards'):
            QTimer.singleShot(500, self.animate_stat_cards)
    
    def animate_stat_cards(self):
        """Trigger staggered animation for stat cards"""
        try:
            from .animated_widgets import StaggeredAnimationGroup
            
            if hasattr(self, 'stat_cards'):
                animation_group = StaggeredAnimationGroup(self.stat_cards, delay=200)
                animation_group.start_animations()
        except Exception as e:
            print(f"Error animating stat cards: {e}")    
    
    def update_stat_cards(self):
        if not hasattr(self, 'stat_cards'):
            return
            
        # L·∫•y d·ªØ li·ªáu th·ª±c
        now = datetime.datetime.now()
        month = now.month
        year = now.year
        user_id = getattr(self.user_manager, 'current_user', {}).get('id', None)
        
        if not user_id:
            return
            
        # L·∫•y t·∫•t c·∫£ giao d·ªãch c·ªßa user
        all_transactions = []
        try:
            import json
            with open('data/transactions.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                all_transactions = [t for t in data if t.get('user_id') == user_id]
        except Exception as e:
            print(f"L·ªói ƒë·ªçc d·ªØ li·ªáu giao d·ªãch: {e}")
            return
            
        # T√≠nh to√°n th·ªëng k√™ th√°ng hi·ªán t·∫°i
        current_month_income = 0
        current_month_expense = 0
        previous_month_income = 0
        previous_month_expense = 0
        
        for t in all_transactions:
            try:
                # Parse date t·ª´ ISO format
                tx_date = datetime.datetime.fromisoformat(t['date'].replace('Z', '+00:00'))
                tx_month = tx_date.month
                tx_year = tx_date.year
                amount = t.get('amount', 0)
                
                if tx_year == year:
                    if tx_month == month:  # Th√°ng hi·ªán t·∫°i
                        if t.get('type') == 'income':
                            current_month_income += amount
                        elif t.get('type') == 'expense':
                            current_month_expense += amount
                    elif tx_month == (month - 1 if month > 1 else 12):  # Th√°ng tr∆∞·ªõc
                        if t.get('type') == 'income':
                            previous_month_income += amount
                        elif t.get('type') == 'expense':
                            previous_month_expense += amount
            except Exception as e:
                print(f"L·ªói parse ng√†y th√°ng: {e}")
                continue
        
        balance = current_month_income - current_month_expense
        
        # T√≠nh ph·∫ßn trƒÉm thay ƒë·ªïi
        income_change = ((current_month_income - previous_month_income) / previous_month_income * 100) if previous_month_income > 0 else 0
        expense_change = ((current_month_expense - previous_month_expense) / previous_month_expense * 100) if previous_month_expense > 0 else 0
        
        # Ti·∫øt ki·ªám = t·ªïng thu nh·∫≠p t·ª´ ƒë·∫ßu nƒÉm - t·ªïng chi ti√™u t·ª´ ƒë·∫ßu nƒÉm
        year_income = sum(t.get('amount', 0) for t in all_transactions 
                         if t.get('type') == 'income' and 
                         datetime.datetime.fromisoformat(t['date'].replace('Z', '+00:00')).year == year)
        year_expense = sum(t.get('amount', 0) for t in all_transactions 
                          if t.get('type') == 'expense' and 
                          datetime.datetime.fromisoformat(t['date'].replace('Z', '+00:00')).year == year)
        savings = year_income - year_expense
        
        # Update animated cards with new values
        if len(self.stat_cards) >= 4:
            self.stat_cards[0].set_value(current_month_income)  # Thu nh·∫≠p
            self.stat_cards[0].update_subtitle(f'{income_change:+.1f}% so v·ªõi th√°ng tr∆∞·ªõc')
            self.stat_cards[0].update_trend('‚Üó' if income_change >= 0 else '‚Üò')
            
            self.stat_cards[1].set_value(current_month_expense)  # Chi ti√™u
            self.stat_cards[1].update_subtitle(f'{expense_change:+.1f}% so v·ªõi th√°ng tr∆∞·ªõc')
            self.stat_cards[1].update_trend('‚Üó' if expense_change >= 0 else '‚Üò')
            
            self.stat_cards[2].set_value(balance)  # S·ªë d∆∞
            self.stat_cards[2].update_subtitle(f'{((balance/current_month_income)*100 if current_month_income > 0 else 0):.1f}% c·ªßa thu nh·∫≠p')
            
            self.stat_cards[3].set_value(savings)  # Ti·∫øt ki·ªám
            self.stat_cards[3].update_subtitle(f'{((savings/year_income)*100 if year_income > 0 else 0):.1f}% t√≠ch lu·ªπ nƒÉm')
        
        print(f"Th·ªëng k√™ th√°ng {month}/{year}:")
        print(f"Thu nh·∫≠p: {current_month_income:,.0f} ƒë ({income_change:+.1f}%)")
        print(f"Chi ti√™u: {current_month_expense:,.0f} ƒë ({expense_change:+.1f}%)")
        print(f"S·ªë d∆∞: {balance:,.0f} ƒë")
        print(f"Ti·∫øt ki·ªám nƒÉm: {savings:,.0f} ƒë")

    def update_line_chart(self):
        if not hasattr(self, 'line_chart_canvas'):
            return
            
        fig = self.line_chart_canvas.figure
        fig.clear()
        
        ax = fig.add_subplot(111)
        ax.set_facecolor('#fafafa')
        
        # L·∫•y d·ªØ li·ªáu th·ª±c t·ª´ transactions
        user_id = getattr(self.user_manager, 'current_user', {}).get('id', None)
        if not user_id:
            return
            
        # ƒê·ªçc d·ªØ li·ªáu t·ª´ file
        all_transactions = []
        try:
            import json
            with open('data/transactions.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                all_transactions = [t for t in data if t.get('user_id') == user_id]
        except Exception as e:
            print(f"L·ªói ƒë·ªçc d·ªØ li·ªáu: {e}")
            return
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu theo th√°ng (6 th√°ng g·∫ßn nh·∫•t)
        now = datetime.datetime.now()
        months_data = []
        income_data = []
        expense_data = []
        
        for i in range(6):
            target_month = now.month - i
            target_year = now.year
            if target_month <= 0:
                target_month += 12
                target_year -= 1
                
            month_income = 0
            month_expense = 0
            
            for t in all_transactions:
                try:
                    tx_date = datetime.datetime.fromisoformat(t['date'].replace('Z', '+00:00'))
                    if tx_date.month == target_month and tx_date.year == target_year:
                        amount = t.get('amount', 0)
                        if t.get('type') == 'income':
                            month_income += amount
                        elif t.get('type') == 'expense':
                            month_expense += amount
                except Exception:
                    continue
            
            months_data.append(f"{target_month:02d}/{str(target_year)[2:]}")
            income_data.append(month_income / 1000)  # Chuy·ªÉn sang ngh√¨n ƒë·ªìng
            expense_data.append(month_expense / 1000)
        
        # Reverse ƒë·ªÉ hi·ªÉn th·ªã t·ª´ c≈© ƒë·∫øn m·ªõi
        months_data.reverse()
        income_data.reverse()
        expense_data.reverse()
        
        ax.plot(months_data, income_data, marker='o', linewidth=3, color='#10b981', label='Thu nh·∫≠p', markersize=6)
        ax.plot(months_data, expense_data, marker='o', linewidth=3, color='#ef4444', label='Chi ti√™u', markersize=6)
        
        ax.set_ylabel('S·ªë ti·ªÅn (ngh√¨n ƒë)', fontsize=10, color='#64748b')
        ax.legend(loc='upper left', frameon=False)
        ax.grid(True, linestyle='-', alpha=0.1)
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.spines['left'].set_color('#e2e8f0')
        ax.spines['bottom'].set_color('#e2e8f0')
        
        plt.setp(ax.get_xticklabels(), color='#64748b', fontsize=9)
        plt.setp(ax.get_yticklabels(), color='#64748b', fontsize=9)
        
        fig.tight_layout()
        self.line_chart_canvas.draw()

    def update_pie_chart(self):
        if not hasattr(self, 'pie_chart_canvas'):
            return
            
        fig = self.pie_chart_canvas.figure
        fig.clear()
        
        ax = fig.add_subplot(111)
        
        # L·∫•y d·ªØ li·ªáu th·ª±c
        user_id = getattr(self.user_manager, 'current_user', {}).get('id', None)
        if not user_id:
            return
            
        # ƒê·ªçc d·ªØ li·ªáu giao d·ªãch v√† categories
        all_transactions = []
        categories_map = {}
        
        try:
            import json
            # ƒê·ªçc transactions
            with open('data/transactions.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                # L·ªçc giao d·ªãch chi ti√™u c·ªßa user trong th√°ng hi·ªán t·∫°i
                now = datetime.datetime.now()
                for t in data:
                    if (t.get('user_id') == user_id and 
                        t.get('type') == 'expense'):
                        try:
                            tx_date = datetime.datetime.fromisoformat(t['date'].replace('Z', '+00:00'))
                            if tx_date.month == now.month and tx_date.year == now.year:
                                all_transactions.append(t)
                        except Exception:
                            continue
            
            # ƒê·ªçc categories
            with open('data/categories.json', 'r', encoding='utf-8') as f:
                categories = json.load(f)
                for cat in categories:
                    categories_map[cat.get('category_id')] = {
                        'name': cat.get('name', 'Kh√°c'),
                        'color': cat.get('color', '#6b7280')
                    }
        except Exception as e:
            print(f"L·ªói ƒë·ªçc d·ªØ li·ªáu: {e}")
            return
        
        # T√≠nh to√°n chi ti√™u theo danh m·ª•c
        expense_by_category = {}
        colors = []
        
        for t in all_transactions:
            cat_id = t.get('category_id')
            cat_info = categories_map.get(cat_id, {'name': 'Kh√°c', 'color': '#6b7280'})
            cat_name = cat_info['name']
            amount = t.get('amount', 0)
            
            if cat_name in expense_by_category:
                expense_by_category[cat_name] += amount
            else:
                expense_by_category[cat_name] = amount
                colors.append(cat_info['color'])
        
        if not expense_by_category:
            ax.text(0.5, 0.5, 'Kh√¥ng c√≥ d·ªØ li·ªáu chi ti√™u\ntrong th√°ng n√†y', 
                   ha='center', va='center', fontsize=12, color='#64748b')
            fig.tight_layout()
            self.pie_chart_canvas.draw()
            return
        
        # T·∫°o pie chart
        categories = list(expense_by_category.keys())
        values = list(expense_by_category.values())
        
        # N·∫øu c√≥ qu√° nhi·ªÅu danh m·ª•c, g·ªôp c√°c danh m·ª•c nh·ªè v√†o "Kh√°c"
        if len(categories) > 6:
            sorted_items = sorted(zip(categories, values, colors), key=lambda x: x[1], reverse=True)
            top_categories = sorted_items[:5]
            other_total = sum(item[1] for item in sorted_items[5:])
            
            categories = [item[0] for item in top_categories] + ['Kh√°c']
            values = [item[1] for item in top_categories] + [other_total]
            colors = [item[2] for item in top_categories] + ['#6b7280']
        
        wedges, texts, autotexts = ax.pie(values, labels=categories, autopct='%1.0f%%', 
                                         colors=colors, startangle=90, pctdistance=0.85)
        
        # Style the text
        for text in texts:
            text.set_fontsize(9)
            text.set_color('#64748b')
        
        for autotext in autotexts:
            autotext.set_color('white')
            autotext.set_fontsize(8)
            autotext.set_fontweight('bold')
        
        # Create donut chart
        centre_circle = plt.Circle((0, 0), 0.60, fc='white')
        ax.add_artist(centre_circle)
        
        ax.axis('equal')
        fig.tight_layout()
        self.pie_chart_canvas.draw()

    def update_transactions_table(self):
        if not hasattr(self, 'transactions_table'):
            return
            
        user_id = getattr(self.user_manager, 'current_user', {}).get('id', None)
        if not user_id:
            return
            
        # ƒê·ªçc d·ªØ li·ªáu th·ª±c
        all_transactions = []
        categories_map = {}
        
        try:
            import json
            # ƒê·ªçc transactions
            with open('data/transactions.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                all_transactions = [t for t in data if t.get('user_id') == user_id]
            
            # ƒê·ªçc categories
            with open('data/categories.json', 'r', encoding='utf-8') as f:
                categories = json.load(f)
                for cat in categories:
                    categories_map[cat.get('category_id')] = cat.get('name', 'Kh√°c')
        except Exception as e:
            print(f"L·ªói ƒë·ªçc d·ªØ li·ªáu: {e}")
            return
        
        # S·∫Øp x·∫øp giao d·ªãch theo ng√†y m·ªõi nh·∫•t
        all_transactions.sort(key=lambda t: t.get('date', ''), reverse=True)
        recent_tx = all_transactions[:10]  # L·∫•y 10 giao d·ªãch g·∫ßn nh·∫•t
        
        self.transactions_table.setRowCount(len(recent_tx))
        
        for i, t in enumerate(recent_tx):
            # Ng√†y th√°ng
            try:
                tx_date = datetime.datetime.fromisoformat(t['date'].replace('Z', '+00:00'))
                date_str = tx_date.strftime('%d/%m/%Y')
            except Exception:
                date_str = t.get('date', '')
            self.transactions_table.setItem(i, 0, QTableWidgetItem(date_str))
            
            # Type v·ªõi colored indicator
            tx_type = t.get('type', 'expense')
            type_text = '‚óè Chi ti√™u' if tx_type == 'expense' else '‚óè Thu nh·∫≠p'
            type_item = QTableWidgetItem(type_text)
            type_item.setForeground(QColor('#ef4444' if tx_type == 'expense' else '#10b981'))
            self.transactions_table.setItem(i, 1, type_item)
            
            # Danh m·ª•c
            cat_name = categories_map.get(t.get('category_id'), 'Kh√°c')
            self.transactions_table.setItem(i, 2, QTableWidgetItem(cat_name))
            
            # S·ªë ti·ªÅn v·ªõi m√†u s·∫Øc
            amount = t.get('amount', 0)
            amount_item = QTableWidgetItem(f"{amount:,.0f} ƒë")
            amount_item.setForeground(QColor('#10b981' if tx_type == 'income' else '#ef4444'))
            self.transactions_table.setItem(i, 3, amount_item)
            
            # Ghi ch√∫
            note = t.get('description', t.get('note', ''))
            self.transactions_table.setItem(i, 4, QTableWidgetItem(note))
            
            # Action buttons
            action_item = QTableWidgetItem('‚úèÔ∏è üóëÔ∏è')
            self.transactions_table.setItem(i, 5, action_item)    
            
    def switch_tab(self, index):
        self.content_stack.setCurrentIndex(index)
        
        # Update button styles with consistent design
        for i, btn in enumerate(self.menu_buttons):
            if i == index:
                btn.setStyleSheet("""
                    QPushButton {
                        text-align: left;
                        padding-left: 20px;
                        border: none;
                        border-radius: 8px;
                        background: #f0f9ff;
                        color: #0369a1;
                        margin: 2px 12px;
                        font-weight: 600;
                        border-left: 3px solid #3b82f6;
                    }
                """)
            else:
                btn.setStyleSheet("""
                    QPushButton {
                        text-align: left;
                        padding-left: 20px;
                        border: none;
                        border-radius: 8px;
                        background: transparent;
                        color: #64748b;
                        margin: 2px 12px;
                        font-weight: 500;
                    }
                    QPushButton:hover {
                        background: #f8fafc;
                        color: #1e293b;
                        border-left: 3px solid #e2e8f0;
                    }
                """)

    def connect_tab_signals(self):
        """K·∫øt n·ªëi signals gi·ªØa c√°c tab"""
        # Khi th√™m giao d·ªãch th√†nh c√¥ng -> c·∫≠p nh·∫≠t dashboard v√† history
        if hasattr(self.transaction_form, 'transaction_added'):
            self.transaction_form.transaction_added.connect(self.on_transaction_changed)
        
        # Khi x√≥a giao d·ªãch -> c·∫≠p nh·∫≠t dashboard
        if hasattr(self.transaction_history, 'transaction_deleted'):
            self.transaction_history.transaction_deleted.connect(self.on_transaction_changed)
        
        # Khi click edit giao d·ªãch t·ª´ history -> chuy·ªÉn sang form edit
        if hasattr(self.transaction_history, 'edit_transaction'):
            self.transaction_history.edit_transaction.connect(self.on_edit_transaction)
    
    def on_transaction_changed(self):
        """X·ª≠ l√Ω khi c√≥ thay ƒë·ªïi giao d·ªãch"""
        # C·∫≠p nh·∫≠t dashboard
        self.update_dashboard()
        
        # Reload history
        if hasattr(self.transaction_history, 'reload_data'):
            self.transaction_history.reload_data()
        
        # Reload reports n·∫øu c√≥
        if hasattr(self.report_tab, 'reload_data'):
            self.report_tab.reload_data()
    
    def on_edit_transaction(self, transaction):
        """X·ª≠ l√Ω khi edit giao d·ªãch t·ª´ history"""
        # Chuy·ªÉn sang tab transaction form
        self.switch_tab(1)
        
        # Set data cho form edit
        if hasattr(self.transaction_form, 'set_transaction_for_edit'):
            self.transaction_form.set_transaction_for_edit(transaction)

    def reload_categories(self):
        # Callback ƒë·ªÉ reload category ·ªü c√°c tab kh√°c khi c√≥ thay ƒë·ªïi
        if hasattr(self.transaction_form, 'reload_categories'):
            self.transaction_form.reload_categories()
        if hasattr(self.transaction_history, 'load_categories'):
            self.transaction_history.load_categories()
        if hasattr(self.report_tab, 'reload_categories'):
            self.report_tab.reload_categories()
        self.update_dashboard()

    def _on_add_transaction(self):
        self.switch_tab(1)  # Switch to transaction form

    def show_user_profile(self):
        """Hi·ªÉn th·ªã dialog th√¥ng tin c√° nh√¢n c·ªßa user"""
        try:
            from .user_profile import UserProfile
            
            profile_dialog = UserProfile(self.user_manager, self)
            
            # Connect signals
            profile_dialog.profile_updated.connect(self.on_profile_updated)
            profile_dialog.logout_requested.connect(self.on_logout_requested)
            
            profile_dialog.exec_()
        except Exception as e:
            print(f"Error showing user profile: {e}")
    
    def show_notifications(self):
        """Hi·ªÉn th·ªã trung t√¢m th√¥ng b√°o"""
        try:
            from .user_notifications import NotificationCenter
            
            notification_center = NotificationCenter(self.user_manager, self)
            notification_center.show()
        except Exception as e:
            print(f"Error showing notifications: {e}")
    
    def show_welcome_toast(self):
        """Hi·ªÉn th·ªã th√¥ng b√°o ch√†o m·ª´ng khi ƒëƒÉng nh·∫≠p"""
        try:
            from .user_notifications import show_welcome_message
            
            if self.current_user:
                show_welcome_message(self.current_user, self)
        except Exception as e:
            print(f"Error showing welcome toast: {e}")
            
    def on_profile_updated(self):
        """Callback khi profile ƒë∆∞·ª£c c·∫≠p nh·∫≠t"""
        # Reload user info v√† c·∫≠p nh·∫≠t hi·ªÉn th·ªã
        if self.current_user:
            # Reload user from database
            updated_user = self.user_manager.get_user_by_id(self.current_user.get('user_id'))
            if updated_user:
                self.current_user = updated_user
                self.user_manager.current_user = updated_user
                
                # Update display
                user_name = updated_user.get('full_name', updated_user.get('name', updated_user.get('username', 'User')))
                self.user_button.setText(f'üë§  {user_name}')
                
                # Show success toast
                from .user_notifications import show_toast                
                show_toast(self, "Th√¥ng tin c√° nh√¢n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!", "success")

    def on_logout_requested(self):
        """Callback khi user y√™u c·∫ßu ƒëƒÉng xu·∫•t"""
        self.logout_signal.emit()
    
    def setup_quick_actions(self):
        """Thi·∫øt l·∫≠p quick actions floating button"""
        try:
            from .quick_actions import add_quick_actions_to_widget
            
            self.quick_actions = add_quick_actions_to_widget(self)
            
            # Connect quick actions signals
            self.quick_actions.add_income_requested.connect(lambda: self.on_quick_add_transaction('income'))
            self.quick_actions.add_expense_requested.connect(lambda: self.on_quick_add_transaction('expense'))
            self.quick_actions.view_report_requested.connect(lambda: self.switch_tab(3))
            self.quick_actions.view_budget_requested.connect(lambda: self.switch_tab(4))
            
        except Exception as e:
            print(f"Error setting up quick actions: {e}")
    
    def on_quick_add_transaction(self, transaction_type):
        """X·ª≠ l√Ω th√™m giao d·ªãch nhanh"""
        # Chuy·ªÉn sang tab transaction form
        self.switch_tab(1)
        
        # Pre-select transaction type if form supports it
        if hasattr(self.transaction_form, 'set_transaction_type'):
            QTimer.singleShot(100, lambda: self.transaction_form.set_transaction_type(transaction_type))
            
        # Show success toast
        from .user_notifications import show_toast
        type_text = "thu nh·∫≠p" if transaction_type == 'income' else "chi ti√™u"
        show_toast(self, f"Chuy·ªÉn ƒë·∫øn form th√™m {type_text}", "info", 2000)
